=== ./obj/Debug/net9.0/HospitalAppointmentSystem.RazorAssemblyInfo.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute(("Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFact" +
    "ory, Microsoft.AspNetCore.Mvc.Razor"))]

// Généré par la classe MSBuild WriteCodeFragment.

=== ./obj/Debug/net9.0/HospitalAppointmentSystem.AssemblyInfo.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Identity.UI.UIFrameworkAttribute("Bootstrap5")]
[assembly: System.Reflection.AssemblyCompanyAttribute("HospitalAppointmentSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("HospitalAppointmentSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("HospitalAppointmentSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

=== ./obj/Debug/net9.0/HospitalAppointmentSystem.MvcApplicationPartsAssemblyInfo.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.Identity.UI")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Généré par la classe MSBuild WriteCodeFragment.

=== ./obj/Debug/net9.0/HospitalAppointmentSystem.GlobalUsings.g.cs ===
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
=== ./obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ===
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]
=== ./Migrations/20250331162149_AddMedicalRecords2.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250331162149_AddMedicalRecords2")]
    partial class AddMedicalRecords2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250405091408_AddStatusToPrescriptions.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250405091408_AddStatusToPrescriptions")]
    partial class AddStatusToPrescriptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250404113217_AddReminderSentFlag.cs ===
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddReminderSentFlag : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "ReminderSent",
                table: "Appointments",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ReminderSent",
                table: "Appointments");
        }
    }
}
=== ./Migrations/20250404161003_AddFeedbackModel.cs ===
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddFeedbackModel : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Feedbacks",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Rating = table.Column<int>(type: "INTEGER", nullable: false),
                    Comment = table.Column<string>(type: "TEXT", maxLength: 1000, nullable: true),
                    PatientId = table.Column<string>(type: "TEXT", nullable: false),
                    DoctorId = table.Column<string>(type: "TEXT", nullable: false),
                    AppointmentId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Feedbacks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Feedbacks_Appointments_AppointmentId",
                        column: x => x.AppointmentId,
                        principalTable: "Appointments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Feedbacks_AspNetUsers_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Feedbacks_AspNetUsers_PatientId",
                        column: x => x.PatientId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Feedbacks_AppointmentId",
                table: "Feedbacks",
                column: "AppointmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Feedbacks_DoctorId",
                table: "Feedbacks",
                column: "DoctorId");

            migrationBuilder.CreateIndex(
                name: "IX_Feedbacks_PatientId",
                table: "Feedbacks",
                column: "PatientId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Feedbacks");
        }
    }
}
=== ./Migrations/20250404162451_AddPrescriptions.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404162451_AddPrescriptions")]
    partial class AddPrescriptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250330110645_AddMedicalRecords.cs ===
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddMedicalRecords : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "ReceiveEmailNotifications",
                table: "AspNetUsers",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ReceiveEmailNotifications",
                table: "AspNetUsers");
        }
    }
}
=== ./Migrations/20250327101459_InitialCreate.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250327101459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250404161717_AddCreatedAtToFeedback.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddCreatedAtToFeedback : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Comment",
                table: "Feedbacks",
                type: "TEXT",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "TEXT",
                oldMaxLength: 1000,
                oldNullable: true);

            migrationBuilder.AddColumn<DateTime>(
                name: "CreatedAt",
                table: "Feedbacks",
                type: "TEXT",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "CreatedAt",
                table: "Feedbacks");

            migrationBuilder.AlterColumn<string>(
                name: "Comment",
                table: "Feedbacks",
                type: "TEXT",
                maxLength: 1000,
                nullable: true,
                oldClrType: typeof(string),
                oldType: "TEXT");
        }
    }
}
=== ./Migrations/20250328125221_AddDoctorDaysOff.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddDoctorDaysOff : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "DoctorDaysOff",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DoctorId = table.Column<string>(type: "TEXT", nullable: false),
                    Start = table.Column<DateTime>(type: "TEXT", nullable: false),
                    End = table.Column<DateTime>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorDaysOff", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DoctorDaysOff_AspNetUsers_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_DoctorDaysOff_DoctorId",
                table: "DoctorDaysOff",
                column: "DoctorId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "DoctorDaysOff");
        }
    }
}
=== ./Migrations/20250330110645_AddMedicalRecords.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250330110645_AddMedicalRecords")]
    partial class AddMedicalRecords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/AppDbContextModelSnapshot.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Models.Prescription", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250405091408_AddStatusToPrescriptions.cs ===
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddStatusToPrescriptions : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "Status",
                table: "Prescriptions",
                type: "TEXT",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Status",
                table: "Prescriptions");
        }
    }
}
=== ./Migrations/20250404162451_AddPrescriptions.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddPrescriptions : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Prescriptions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Medication = table.Column<string>(type: "TEXT", nullable: false),
                    Dosage = table.Column<string>(type: "TEXT", nullable: false),
                    Instructions = table.Column<string>(type: "TEXT", nullable: false),
                    IssueDate = table.Column<DateTime>(type: "TEXT", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "TEXT", nullable: true),
                    PatientId = table.Column<string>(type: "TEXT", nullable: false),
                    DoctorId = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prescriptions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Prescriptions_AspNetUsers_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Prescriptions_AspNetUsers_PatientId",
                        column: x => x.PatientId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Prescriptions_DoctorId",
                table: "Prescriptions",
                column: "DoctorId");

            migrationBuilder.CreateIndex(
                name: "IX_Prescriptions_PatientId",
                table: "Prescriptions",
                column: "PatientId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Prescriptions");
        }
    }
}
=== ./Migrations/20250404113217_AddReminderSentFlag.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404113217_AddReminderSentFlag")]
    partial class AddReminderSentFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250404161717_AddCreatedAtToFeedback.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404161717_AddCreatedAtToFeedback")]
    partial class AddCreatedAtToFeedback
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250327101459_InitialCreate.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "TEXT", nullable: false),
                    FullName = table.Column<string>(type: "TEXT", nullable: false),
                    Role = table.Column<string>(type: "TEXT", nullable: false),
                    Specialization = table.Column<string>(type: "TEXT", nullable: true),
                    UserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    PasswordHash = table.Column<string>(type: "TEXT", nullable: true),
                    SecurityStamp = table.Column<string>(type: "TEXT", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumber = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Doctors",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    FullName = table.Column<string>(type: "TEXT", nullable: false),
                    Specialization = table.Column<string>(type: "TEXT", nullable: false),
                    Email = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Doctors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    RoleId = table.Column<string>(type: "TEXT", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Appointments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    PatientId = table.Column<string>(type: "TEXT", nullable: false),
                    DoctorId = table.Column<string>(type: "TEXT", nullable: false),
                    StartTime = table.Column<DateTime>(type: "TEXT", nullable: false),
                    EndTime = table.Column<DateTime>(type: "TEXT", nullable: false),
                    Status = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Appointments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Appointments_AspNetUsers_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Appointments_AspNetUsers_PatientId",
                        column: x => x.PatientId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "TEXT", maxLength: 128, nullable: false),
                    ProviderKey = table.Column<string>(type: "TEXT", maxLength: 128, nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "TEXT", nullable: true),
                    UserId = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    RoleId = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    LoginProvider = table.Column<string>(type: "TEXT", maxLength: 128, nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 128, nullable: false),
                    Value = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Appointments_DoctorId",
                table: "Appointments",
                column: "DoctorId");

            migrationBuilder.CreateIndex(
                name: "IX_Appointments_PatientId",
                table: "Appointments",
                column: "PatientId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Appointments");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Doctors");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}
=== ./Migrations/20250328125221_AddDoctorDaysOff.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250328125221_AddDoctorDaysOff")]
    partial class AddDoctorDaysOff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/20250331162149_AddMedicalRecords2.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    /// <inheritdoc />
    public partial class AddMedicalRecords2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "MedicalRecords",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    PatientId = table.Column<string>(type: "TEXT", nullable: false),
                    Title = table.Column<string>(type: "TEXT", nullable: false),
                    Description = table.Column<string>(type: "TEXT", nullable: false),
                    Date = table.Column<DateTime>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicalRecords", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MedicalRecords_AspNetUsers_PatientId",
                        column: x => x.PatientId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_MedicalRecords_PatientId",
                table: "MedicalRecords",
                column: "PatientId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "MedicalRecords");
        }
    }
}
=== ./Migrations/20250404161003_AddFeedbackModel.Designer.cs ===
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404161003_AddFeedbackModel")]
    partial class AddFeedbackModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDaysOff");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorDayOff", b =>
                {
                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalRecord", b =>
                {
                    b.HasOne("ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Models/Feedback.cs ===
public class Feedback
{
    public int Id { get; set; }

    public string PatientId { get; set; }
    public ApplicationUser Patient { get; set; }

    public string DoctorId { get; set; }
    public ApplicationUser Doctor { get; set; }

    public int Rating { get; set; } // entre 1 et 5

    public string Comment { get; set; }

    public DateTime CreatedAt { get; set; } = DateTime.Now;

    public int AppointmentId { get; set; }
    public Appointment Appointment { get; set; }
}=== ./Models/DoctorDaysOff.cs ===
using System;
using System.ComponentModel.DataAnnotations;

public class DoctorDayOff
{
    public int Id { get; set; }

    [Required]
    public string DoctorId { get; set; } = null!;

    [Required]
    public DateTime Start { get; set; }

    [Required]
    public DateTime End { get; set; }

    // Navigation
    public ApplicationUser Doctor { get; set; } = null!;
}=== ./Models/MedicalRecord.cs ===
using System;
using System.ComponentModel.DataAnnotations;

public class MedicalRecord
{
    public int Id { get; set; }

    [Required]
    public string PatientId { get; set; } = "";

    [Required]
    public string Title { get; set; } = "";

    public string Description { get; set; } = "";

    [DataType(DataType.Date)]
    public DateTime Date { get; set; }

    public ApplicationUser Patient { get; set; } = null!;
}=== ./Models/Appointment.cs ===
public class Appointment
{
    public int Id { get; set; }

    public string PatientId { get; set; } // Foreign key to ApplicationUser
    public ApplicationUser Patient { get; set; }

    public string DoctorId { get; set; } // Foreign key to Doctor
    public ApplicationUser Doctor { get; set; }

    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Status { get; set; } // Pending, Approved, Rejected, Completed
    
    public bool ReminderSent { get; set; } = false; // Reminder service by email 24h before appointment
}=== ./Models/Doctor.cs ===
public class Doctor
{
    public int Id { get; set; }
    public string FullName { get; set; }
    public string Specialization { get; set; }
    public string Email { get; set; }
}
=== ./Models/Prescription.cs ===
namespace HospitalAppointmentSystem.Models;

using System;
using System.ComponentModel.DataAnnotations;

public class Prescription
{
    public int Id { get; set; }

    [Required]
    public string Medication { get; set; } = "";

    [Required]
    public string Dosage { get; set; } = "";

    public string Instructions { get; set; } = "";

    [Required]
    public DateTime IssueDate { get; set; }

    public DateTime? ExpirationDate { get; set; }

    [Required]
    public string PatientId { get; set; }

    public ApplicationUser? Patient { get; set; }

    [Required]
    public string DoctorId { get; set; }

    public ApplicationUser? Doctor { get; set; }

    [Required]
    public string Status { get; set; } = "Pending";
}=== ./Models/AppointmentRequestDto.cs ===
using System;
using System.ComponentModel.DataAnnotations;

public class AppointmentRequestDto
{
    [Required]
    public string DoctorId { get; set; }

    [Required]
    public DateTime StartTime { get; set; }

    [Required]
    public DateTime EndTime { get; set; }

    [Required]
    public string Status { get; set; }
}=== ./Models/ApplicationUser.cs ===
using Microsoft.AspNetCore.Identity;

public class ApplicationUser : IdentityUser
{
    public string FullName { get; set; }
    public string Role { get; set; } // "Patient", "Doctor", "Admin"
    public string? Specialization { get; set; } // Nullable to prevent SQLite errors
    public bool ReceiveEmailNotifications { get; set; } // Ajout de la propriété manquante
}=== ./HospitalAppointmentSystem.csproj ===
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="itext7" Version="9.1.0" />
    <PackageReference Include="MailKit" Version="4.11.0" />
    <PackageReference Include="Markdig" Version="0.40.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.3">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.3" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.3.2" />
    <PackageReference Include="itext7.bouncy-castle-adapter" Version="9.1.0" />
  </ItemGroup>

  <ItemGroup>
    <None Include="wwwroot\css\privacy.css" />
  </ItemGroup>

</Project>
=== ./Controllers/AppointmentController.cs ===
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

[Route("api/appointments")]
[ApiController]
public class AppointmentController : ControllerBase
{
    private readonly AppointmentService _appointmentService;

    public AppointmentController(AppointmentService appointmentService)
    {
        _appointmentService = appointmentService;
    }

    [HttpGet("available")]
    public async Task<IActionResult> GetAvailableTimeSlots([FromQuery] string doctorId, [FromQuery] DateTime date)
    {
        if (string.IsNullOrEmpty(doctorId))
            return BadRequest(new { error = "doctorId is required" });

        var slots = await _appointmentService.GetAvailableTimeSlots(doctorId, date);
        return Ok(slots);
    }

    [HttpPost("book")]
    public async Task<IActionResult> BookAppointment([FromBody] AppointmentRequestDto model)
    {
        if (model == null)
            return BadRequest("Invalid data");

        // 🔒 Vérifie si le médecin est en jour off
        var isDoctorOff = await _appointmentService.IsDoctorOff(model.DoctorId, model.StartTime, model.EndTime);
        if (isDoctorOff)
            return BadRequest("Le médecin est en congé à cette date.");

        var success = await _appointmentService.BookAppointment(new Appointment
        {
            DoctorId = model.DoctorId,
            StartTime = model.StartTime,
            EndTime = model.EndTime,
            Status = "Pending"
        });

        if (!success)
            return BadRequest("Ce créneau est déjà réservé.");

        return Ok("Rendez-vous réservé avec succès !");
    }
}=== ./Controllers/TestController.cs ===
using Microsoft.AspNetCore.Mvc;

[Route("api/test")]
[ApiController]
public class TestController : ControllerBase
{
    [HttpGet("ping")]
    public IActionResult Ping()
    {
        return Ok("🏓 Pong! L'API fonctionne.");
    }

    [HttpGet("data")]
    public IActionResult GetTestData()
    {
        var testData = new
        {
            Message = "API is working",
            Timestamp = DateTime.Now
        };
        return Ok(testData);
    }
}=== ./Data/AppDbContext.cs ===
using HospitalAppointmentSystem.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

public class AppDbContext : IdentityDbContext<ApplicationUser>
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Doctor> Doctors { get; set; }
    public DbSet<Appointment> Appointments { get; set; }
    public DbSet<DoctorDayOff> DoctorDaysOff { get; set; }
    public DbSet<MedicalRecord> MedicalRecords { get; set; }
    public DbSet<Feedback> Feedbacks { get; set; }
    public DbSet<Prescription> Prescriptions { get; set; }
}
=== ./Pages/Privacy.cshtml ===
﻿@page
@model PrivacyModel
@{
    ViewData["Title"] = "Privacy Policy";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/privacy.css" asp-append-version="true" />

<div class="privacy-wrapper">
    <div class="privacy-header">
        <h1>Privacy Policy</h1>
        <p>Your privacy is important to us. Here's how we handle your data at MedLife Hospital.</p>
    </div>

    <div class="privacy-section">
        <h3>1. Information We Collect</h3>
        <p>We collect your name, email, and appointment details to provide medical services and administrative support.</p>

        <h3>2. How We Use Your Information</h3>
        <p>Data is used only to manage appointments, send updates, and improve patient care.</p>

        <h3>3. Data Protection</h3>
        <p>All personal data is stored securely using modern encryption and access control practices.</p>

        <h3>4. Your Rights</h3>
        <p>You can access, update, or delete your information at any time via your account or by contacting us.</p>

        <h3>5. Contact</h3>
        <p>Questions? Contact us at <strong>privacy@medlife.com</strong>.</p>
    </div>
</div>

@section Scripts {
    <script>
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        });

        document.querySelectorAll('.privacy-section h3, .privacy-section p').forEach(el => {
            el.classList.add('fade-in');
            observer.observe(el);
        });
    </script>
}
=== ./Pages/DoctorDaysOff.cshtml ===
@page
@model DoctorDaysOffModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Set Doctor Days Off";
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@error.ErrorMessage</div>
        }
    </div>
}

<h2>Set Days Off</h2>

<form method="post">
    <div class="mb-3">
        <label for="Start">Start Date & Time</label>
        <input asp-for="Input.Start" type="datetime-local" class="form-control" required value="@DateTime.Now.AddMinutes(30 - DateTime.Now.Minute % 30).ToString("yyyy-MM-ddTHH:mm")" />
    </div>

    <div class="mb-3">
        <label for="End">End Date & Time</label>
        <input asp-for="Input.End" type="datetime-local" class="form-control" required value="@DateTime.Now.AddHours(1).AddMinutes(30 - DateTime.Now.Minute % 30).ToString("yyyy-MM-ddTHH:mm")" />
    </div>

    @if (User.IsInRole("Admin"))
    {
        <div class="mb-3">
            <label for="DoctorId">Select Doctor</label>
            <select asp-for="Input.DoctorId" class="form-control" required>
                <option value="">-- Select Doctor --</option>
                @foreach (var doc in Model.Doctors)
                {
                    <option value="@doc.Id">@doc.FullName (@doc.Specialization)</option>
                }
            </select>
        </div>
    }

    <button type="submit" class="btn btn-primary">Save</button>
    
    <script>
        document.querySelector("form").addEventListener("submit", function (e) {
            const startInput = document.querySelector("input[name='Input.Start']");
            const endInput = document.querySelector("input[name='Input.End']");
            const start = new Date(startInput.value);
            const end = new Date(endInput.value);
            const now = new Date();

            if (end <= start) {
                e.preventDefault();
                alert("End date/time must be after start date/time.");
                return;
            }

            if (start < now) {
                e.preventDefault();
                alert("Start date/time must be in the future.");
            }
        });
    </script>
</form>

@if (!string.IsNullOrEmpty(Model.Message))
{
    <div class="alert alert-success mt-3">@Model.Message</div>
}

<hr />

<h4 class="mt-5">🔍 Search Days Off</h4>
<input type="text" id="searchInput" class="form-control mb-3" placeholder="Search by date or doctor...">

<h4 class="mt-5">🗓️ Upcoming Days Off</h4>
@if (!Model.ExistingDaysOff.Where(o => o.End >= DateTime.Now).Any())
{
    <p>No days off defined.</p>
}
else
{
    <table class="table table-bordered" id="daysOffTable">
        <thead>
        <tr>
            @if (User.IsInRole("Admin"))
            {
                <th>Doctor</th>
            }
            <th>Start</th>
            <th>End</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody id="futureDaysOffTable">
        @foreach (var off in Model.ExistingDaysOff.Where(o => o.End >= DateTime.Now).OrderBy(o => o.Start))
        {
            <tr>
                @if (User.IsInRole("Admin"))
                {
                    <td>@off.Doctor.FullName (@off.Doctor.Specialization)</td>
                }
                <td data-type="start">@off.Start.ToString("dd-MM-yyyy HH:mm")</td>
                <td data-type="end">@off.End.ToString("dd-MM-yyyy HH:mm")</td>
                <td>
                    @if (User.IsInRole("Admin") || User.IsInRole("Doctor") || off.DoctorId == User.FindFirst("sub")?.Value)
                    {
                        <form method="post" asp-page-handler="Delete" asp-route-id="@off.Id" class="d-inline">
                            <button type="submit" class="btn btn-danger btn-sm"
                                    onclick="return confirm('Are you sure?')">Delete</button>
                        </form>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<h4 class="mt-5">📁 Past Days Off</h4>
@if (!Model.ExistingDaysOff.Where(o => o.End < DateTime.Now).Any())
{
    <p>No past days off defined.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @if (User.IsInRole("Admin"))
                {
                    <th>Doctor</th>
                }
                <th>Start</th>
                <th>End</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var off in Model.ExistingDaysOff.Where(o => o.End < DateTime.Now).OrderBy(o => o.Start))
        {
            <tr>
                @if (User.IsInRole("Admin"))
                {
                    <td>@off.Doctor.FullName (@off.Doctor.Specialization)</td>
                }
                <td>@off.Start.ToString("dd-MM-yyyy HH:mm")</td>
                <td>@off.End.ToString("dd-MM-yyyy HH:mm")</td>
                <td>
                    @if (User.IsInRole("Admin") || User.IsInRole("Doctor") || off.DoctorId == User.FindFirst("sub")?.Value)
                    {
                        <form method="post" asp-page-handler="Delete" asp-route-id="@off.Id" class="d-inline">
                            <button type="submit" class="btn btn-danger btn-sm"
                                    onclick="return confirm('Are you sure?')">Delete</button>
                        </form>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const input = document.getElementById("searchInput");
            input.addEventListener("keyup", function () {
                const filter = this.value.toLowerCase();
                const rows = document.querySelectorAll("#daysOffTable tbody tr");

                rows.forEach(row => {
                    const text = row.innerText.toLowerCase();
                    row.style.display = text.includes(filter) ? "" : "none";
                });
            });
        });
    </script>
}
=== ./Pages/ErrorDebug.cshtml ===
﻿@page
@model ErrorDebugModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to the <strong>Development</strong> environment displays detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>=== ./Pages/Appointments/ManageAppointments.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Authorize] // Accessible aux utilisateurs connectés
public class ManageAppointmentsModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public ManageAppointmentsModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    public List<AppointmentViewModel> UpcomingAppointments { get; set; } = new();
    public List<AppointmentViewModel> PastAppointments { get; set; } = new();
    public bool IsDoctor { get; set; }
    public bool IsAdmin { get; set; }

    public class AppointmentViewModel
    {
        public int Id { get; set; }
        public string PatientName { get; set; } = string.Empty;
        public string DoctorName { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Status { get; set; } = string.Empty;
        public bool IsValidatedByDoctor { get; set; }
        public bool HasFeedback { get; set; }
    }

    public async Task<IActionResult> OnGetAsync()
    {
        var userId = _userManager.GetUserId(User);
        if (userId == null) return Unauthorized();

        var user = await _userManager.FindByIdAsync(userId);
        IsDoctor = await _userManager.IsInRoleAsync(user, "Doctor");
        IsAdmin = await _userManager.IsInRoleAsync(user, "Admin");

        var now = DateTime.Now;

        List<Appointment> appointments;
        if (IsAdmin)
        {
            appointments = await _context.Appointments
                .Include(a => a.Patient)
                .Include(a => a.Doctor)
                .ToListAsync();
        }
        else if (IsDoctor)
        {
            appointments = await _context.Appointments
                .Where(a => a.DoctorId == userId)
                .Include(a => a.Patient)
                .Include(a => a.Doctor)
                .ToListAsync();
        }
        else
        {
            appointments = await _context.Appointments
                .Where(a => a.PatientId == userId)
                .Include(a => a.Doctor)
                .Include(a => a.Patient)
                .ToListAsync();
        }

        var feedbacks = await _context.Feedbacks.ToListAsync();

        var viewModels = appointments.Select(a => new AppointmentViewModel
        {
            Id = a.Id,
            PatientName = a.Patient.FullName,
            DoctorName = $"{a.Doctor.FullName}" + (string.IsNullOrEmpty(a.Doctor.Specialization) ? "" : $" ({a.Doctor.Specialization})"),
            StartTime = a.StartTime,
            EndTime = a.EndTime,
            Status = a.Status,
            IsValidatedByDoctor = a.Status == "Approved",
            HasFeedback = feedbacks.Any(f => f.AppointmentId == a.Id)
        }).ToList();

        UpcomingAppointments = viewModels.Where(a => a.StartTime >= now).OrderBy(a => a.StartTime).ToList();
        PastAppointments = viewModels.Where(a => a.StartTime < now).OrderByDescending(a => a.StartTime).ToList();

        return Page();
    }

    public async Task<IActionResult> OnPostDeleteAsync(int id)
    {
        var appointment = await _context.Appointments.FindAsync(id);
        if (appointment == null) return NotFound();

        var userId = _userManager.GetUserId(User);
        var user = await _userManager.FindByIdAsync(userId);
        var isAdmin = await _userManager.IsInRoleAsync(user, "Admin");

        var isDoctor = appointment.DoctorId == userId;
        var isPatient = appointment.PatientId == userId;

        if (!isAdmin && isPatient && (appointment.StartTime - DateTime.Now).TotalHours < 24)
        {
            TempData["ErrorMessage"] = "You can’t cancel less than 24 hours before the appointment.";
            return RedirectToPage();
        }

        if (!(isAdmin || isDoctor || isPatient))
            return Forbid();

        _context.Appointments.Remove(appointment);
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }

    public async Task<IActionResult> OnPostAcceptAsync(int id)
    {
        var appointment = await _context.Appointments.FindAsync(id);
        if (appointment == null) return NotFound();

        var userId = _userManager.GetUserId(User);
        if (appointment.DoctorId != userId) return Forbid();

        appointment.Status = "Approved";
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }
}
=== ./Pages/Appointments/_TimeSlotOptions.cshtml ===
@foreach (var slot in Model)
{
    <option value="@slot">@slot.ToShortTimeString()</option>
}
=== ./Pages/Appointments/AppointmentPolicies.cshtml ===
@page
@model AppointmentPoliciesModel
@{
    ViewData["Title"] = "Appointment Policies";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/privacy.css" asp-append-version="true" />

<div class="privacy-wrapper">
    <div class="privacy-header">
        <h1>Appointment Policies</h1>
        <p>Understand how appointment scheduling, cancellation, and rescheduling work at MedLife Hospital.</p>
    </div>

    <div class="privacy-section">
        <h3>1. Booking Policy</h3>
        <p>
            You may book appointments with available doctors through your online account. All time slots are displayed based on real-time availability and doctors' schedules.
        </p>

        <h3>2. Cancellation Policy</h3>
        <ul>
            <li>Appointments must be cancelled at least <strong>48 hours in advance</strong>.</li>
            <li>If you try to cancel less than 48 hours before the appointment, cancellation will be blocked.</li>
            <li>For emergency cancellations, please contact our support team.</li>
        </ul>

        <h3>3. Rescheduling Policy</h3>
        <ul>
            <li>Appointments may be rescheduled <strong>up to 48 hours before</strong> the scheduled time.</li>
            <li>After that, the system will prevent changes.</li>
        </ul>

        <h3>4. Reminders & Notifications</h3>
        <p>
            You will receive an email notification confirming your appointment. A reminder will be sent automatically <strong>24 hours</strong> before the appointment.
        </p>

        <h3>5. Telehealth Appointments</h3>
        <p>
            If your appointment is virtual, you will receive a secure link to access the teleconsultation. This link is active only within 10 minutes of the appointment time.
        </p>

        <h3>6. Late Arrival</h3>
        <p>
            Please arrive 10 minutes before your scheduled time. If you are more than 15 minutes late, the doctor may cancel the appointment or ask you to reschedule.
        </p>

        <h3>7. Need Help?</h3>
        <p>
            Contact us at <strong>appointments@medlife.com</strong> for any questions or assistance.
        </p>
    </div>
</div>

@section Scripts {
    <script>
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        });

        document.querySelectorAll('.privacy-section h3, .privacy-section p, .privacy-section ul').forEach(el => {
            el.classList.add('fade-in');
            observer.observe(el);
        });
    </script>
}
=== ./Pages/Appointments/BookAppointment.cshtml ===
@page
@model BookAppointmentModel
@{
    ViewData["Title"] = "Book an Appointment";
}

<style>
    .btn-off {
        background-color: #343a40 !important; /* Bootstrap "dark" */
        color: white !important;
        border: 1px solid #212529;
        opacity: 1 !important; /* ne pas griser le bouton même s’il est disabled */
        cursor: not-allowed;
    }
</style>

<div class="d-flex justify-content-between align-items-center">
    <h2>Book an Appointment</h2>
    @if (User.IsInRole("Patient"))
    {
        <a class="btn btn-outline-primary" href="/Appointments/ManageAppointments">Manage Appointments</a>
    }
</div>

<form method="post">
    <div class="mb-3">
        <label>Select Doctor</label>
        <select asp-for="Input.DoctorId" class="form-control" id="doctorDropdown">
            <option value="">-- Select a Doctor --</option>
            @foreach (var doctor in Model.Doctors)
            {
                <option value="@doctor.Id">@doctor.FullName (@doctor.Specialization)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Select Date</label>
        <input asp-for="Input.Date" type="date" class="form-control" id="dateInput" required />
    </div>

    <div class="mb-3">
        <strong>Legend:</strong>
        <span class="badge bg-success">Available</span>
        <span class="badge bg-secondary">Pending</span>
        <span class="badge bg-danger">Booked</span>
        <span class="badge bg-light text-dark border">Lunch Break</span>
        <span class="badge bg-dark">Doctor Off</span>
    </div>
    <div id="timeSlotButtons">
        <!-- Time slots will be displayed here -->
    </div>

    <input type="hidden" asp-for="Input.TimeSlot" id="selectedTimeSlot" />

    <button type="submit" class="btn btn-primary" id="bookButton" disabled>Select time to Book Appointment</button>
</form>

@if (!string.IsNullOrEmpty(Model.Message))
{
    <br/>
    <div class="alert alert-success">@Model.Message</div>
}

<a class="btn btn-outline-secondary mt-3" asp-page="/Appointments/AppointmentPolicies" target="_blank">📄 View Appointment Policies</a>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dateInput = document.getElementById("dateInput");
        // Définir la date par défaut si aucune valeur n'est présente
        if (!dateInput.value) {
            const today = new Date().toISOString().split('T')[0];
            dateInput.value = today;
        }
        // Toujours définir la date minimale au jour actuel
        dateInput.setAttribute("min", new Date().toISOString().split('T')[0]);

        // Si le docteur est déjà sélectionné et que la date est présente, charger les créneaux
        const doctorDropdown = document.getElementById("doctorDropdown");
        if (doctorDropdown && doctorDropdown.value && dateInput.value) {
            loadSlots();
        }
    });

    // Événements existants pour charger les créneaux lors du changement
    document.getElementById("doctorDropdown").addEventListener("change", loadSlots);
    document.getElementById("dateInput").addEventListener("change", loadSlots);

    function loadSlots() {
        const doctorId = document.getElementById("doctorDropdown").value;
        const date = document.getElementById("dateInput").value;
        const slotContainer = document.getElementById("timeSlotButtons");
        slotContainer.innerHTML = "<p>Loading available slots...</p>";

        if (doctorId && date) {
            const selectedDate = new Date(date);
            const today = new Date();
            const formattedDate = selectedDate.toISOString().split('T')[0];

            fetch(`/api/appointments/available?doctorId=${doctorId}&date=${formattedDate}`)
                .then(response => response.json())
                .then(slots => {
                    slotContainer.innerHTML = "";
                    if (slots.length === 0) {
                        slotContainer.innerHTML = "<p>No available slots for this day.</p>";
                        return;
                    }

                    slots.forEach(slot => {
                        const slotDate = new Date(slot.startTime);
                        const hour = slotDate.getHours();
                        const minutes = slotDate.getMinutes();

                        const isToday = selectedDate.toDateString() === today.toDateString();
                        const isLunch = hour === 12 && (minutes === 0 || minutes === 30);

                        const button = document.createElement("button");
                        button.classList.add("btn", "m-1");
                        button.innerText = slotDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                        if (slot.status === "Unavailable") {
                            button.classList.add("btn-off");
                            button.disabled = true;
                            button.title = "Unavailable - Doctor is off";
                        } else if (isLunch) {
                            button.classList.add("btn-light", "border");
                            button.disabled = true;
                            button.title = "Lunch Break";
                        } else if (isToday && slotDate <= new Date()) {
                            button.classList.add("btn-light", "border");
                            button.disabled = true;
                            button.title = "Past time";
                        } else if (slot.status === "Available") {
                            button.classList.add("btn-success");
                            button.onclick = function () {
                                document.getElementById("selectedTimeSlot").value = slot.startTime;
                                document.getElementById("bookButton").disabled = false;
                            };
                        } else if (slot.status === "Pending") {
                            button.classList.add("btn-secondary");
                            button.disabled = true;
                            button.title = "Pending Approval";
                        } else if (slot.status === "Booked") {
                            button.classList.add("btn-danger");
                            button.disabled = true;
                            button.title = "Already Booked";
                        }

                        slotContainer.appendChild(button);
                    });
                })
                .catch(error => {
                    slotContainer.innerHTML = "<p>Error loading slots. Please try again.</p>";
                    console.error("Error fetching time slots:", error);
                });
        } else {
            slotContainer.innerHTML = "<p>Please select a doctor and date.</p>";
        }
    }
</script>=== ./Pages/Appointments/AppointmentPolicies.cshtml.cs ===
using Microsoft.AspNetCore.Mvc.RazorPages;

public class AppointmentPoliciesModel : PageModel
{
    public void OnGet()
    {
    }
}=== ./Pages/Appointments/ManageAppointments.cshtml ===
@page
@model ManageAppointmentsModel
@{
    ViewData["Title"] = "Manage Appointments";
}

<h2>Manage Appointments</h2>

<input type="text" id="searchInput" class="form-control mb-3" placeholder="Search by patient, doctor, or date..." onkeyup="filterAppointments()" />

@if (!Model.UpcomingAppointments.Any() && !Model.PastAppointments.Any())
{
    <p>No appointments found.</p>
}

@if (Model.UpcomingAppointments.Any())
{
    <h3>Upcoming Appointments</h3>
    <table class="table" id="appointmentsTable">
        <thead>
            <tr>
                <th>Patient</th>
                <th>Doctor</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Model.UpcomingAppointments)
            {
                <tr>
                    <td>@appointment.PatientName</td>
                    <td>@appointment.DoctorName</td>
                    <td>@appointment.StartTime.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@appointment.EndTime.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@appointment.Status</td>
                    <td>
                        @if (Model.IsDoctor && appointment.Status == "Pending")
                        {
                            <form method="post" asp-page-handler="Accept" asp-route-id="@appointment.Id" class="d-inline">
                                <button type="submit" class="btn btn-success btn-sm">Accept</button>
                            </form>
                        }

                        @if (appointment.Status == "Pending")
                        {
                            <a asp-page="/Appointments/EditAppointment" asp-route-id="@appointment.Id" class="btn btn-warning btn-sm">Edit</a>
                        }

                        <form method="post" asp-page-handler="Delete" asp-route-id="@appointment.Id" class="d-inline">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Model.PastAppointments.Any())
{
    <h3>Past Appointments</h3>
    <table class="table" id="appointmentsTablePast">
        <thead>
            <tr>
                <th>Patient</th>
                <th>Doctor</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Status</th>
                @if (User.IsInRole("Admin") || User.IsInRole("Patient"))
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Model.PastAppointments)
            {
                <tr>
                    <td>@appointment.PatientName</td>
                    <td>@appointment.DoctorName</td>
                    <td>@appointment.StartTime.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@appointment.EndTime.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@appointment.Status</td>

                    @if (User.IsInRole("Admin") || User.IsInRole("Patient"))
                    {
                        <td>
                            @if (User.IsInRole("Admin"))
                            {
                                <form method="post" asp-page-handler="Delete" asp-route-id="@appointment.Id" class="d-inline">
                                    <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                </form>
                            }

                            @if (User.IsInRole("Patient") && appointment.Status == "Completed" && !appointment.HasFeedback)
                            {
                                <a class="btn btn-outline-success btn-sm"
                                   asp-page="/Feedback/AddFeedback"
                                   asp-route-appointmentId="@appointment.Id">
                                    Leave Feedback
                                </a>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        function filterAppointments() {
            const input = document.getElementById("searchInput").value.toLowerCase();
            const tables = [document.getElementById("appointmentsTable"), document.getElementById("appointmentsTablePast")];

            tables.forEach(table => {
                if (!table) return;
                const rows = table.getElementsByTagName("tr");
                for (let i = 1; i < rows.length; i++) {
                    const rowText = rows[i].innerText.toLowerCase();
                    rows[i].style.display = rowText.includes(input) ? "" : "none";
                }
            });
        }
    </script>
}
=== ./Pages/Appointments/BookAppointment.cshtml.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Text;
using System.Threading.Tasks;

[Authorize(Roles = "Patient,Admin")]
public class BookAppointmentModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly EmailService _emailService;

    public BookAppointmentModel(AppDbContext context, UserManager<ApplicationUser> userManager, EmailService emailService)
    {
        _context = context;
        _userManager = userManager;
        _emailService = emailService;
    }

    public List<DoctorViewModel> Doctors { get; set; } = new();
    public List<TimeSlot> AvailableTimeSlots { get; set; } = new();
    public string? Message { get; set; }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required]
        public string DoctorId { get; set; } = string.Empty;
        [Required]
        public DateTime Date { get; set; }
        [Required]
        public DateTime TimeSlot { get; set; }
    }

    public async Task<IActionResult> OnGetAsync(string? doctorId, string? date)
    {
        var allUsers = await _context.Users.ToListAsync();
        Doctors = allUsers
            .Where(u => _userManager.IsInRoleAsync(u, "Doctor").Result)
            .Select(u => new DoctorViewModel
            {
                Id = u.Id,
                FullName = u.FullName,
                Specialization = u.Specialization ?? "General"
            }).ToList();

        if (!string.IsNullOrEmpty(doctorId))
        {
            Input.DoctorId = doctorId;
        }

        if (!string.IsNullOrEmpty(date) &&
            DateTime.TryParseExact(date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
        {
            Input.Date = parsedDate;
        }
        else
        {
            Input.Date = DateTime.Today;
            ModelState.AddModelError("", "Format de date invalide. Format attendu : yyyy-MM-dd");
        }

        return Page();
    }
    
    public async Task<IActionResult> OnGetLoadAvailableSlotsAsync(string doctorId, DateTime date)
    {
        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
            return new JsonResult(new List<TimeSlot>());

        var slots = new List<TimeSlot>();
        var start = date.Date.AddHours(9);
        var end = date.Date.AddHours(17);

        for (var t = start; t < end; t = t.AddMinutes(30))
        {
            if (t.Hour == 12) continue; // pause midi
            slots.Add(new TimeSlot { StartTime = t, EndTime = t.AddMinutes(30), Status = "Available" });
        }

        var doctorDaysOff = await _context.DoctorDaysOff
            .Where(d => d.DoctorId == doctorId && d.End > date.Date && d.Start < date.Date.AddDays(1))
            .ToListAsync();

        var appointments = await _context.Appointments
            .Where(a => a.DoctorId == doctorId && a.StartTime.Date == date.Date)
            .ToListAsync();

        foreach (var slot in slots)
        {
            if (doctorDaysOff.Any(d => slot.StartTime < d.End && slot.EndTime > d.Start))
                slot.Status = "Unavailable";
            else if (appointments.Any(a => a.StartTime == slot.StartTime && a.Status == "Approved"))
                slot.Status = "Booked";
        }

        return new JsonResult(slots);
    }

    public async Task<IActionResult> OnPostAsync()
    {
        var patientId = _userManager.GetUserId(User);
        if (patientId == null) return Unauthorized();

        var startTime = Input.TimeSlot;
        var endTime = startTime.AddMinutes(30);

        var isTaken = await _context.Appointments.AnyAsync(a =>
            a.DoctorId == Input.DoctorId &&
            a.Status == "Approved" &&
            a.StartTime < endTime && a.EndTime > startTime);

        var isDoctorOff = await _context.DoctorDaysOff
            .AnyAsync(d => d.DoctorId == Input.DoctorId && startTime < d.End && endTime > d.Start);

        if (isTaken || isDoctorOff)
        {
            ModelState.AddModelError("", "This time slot is already booked or the doctor is unavailable.");
            return Page();
        }

        var appointment = new Appointment
        {
            PatientId = patientId,
            DoctorId = Input.DoctorId,
            StartTime = startTime,
            EndTime = endTime,
            Status = "Pending"
        };

        _context.Appointments.Add(appointment);
        await _context.SaveChangesAsync();

        // Récupérer les données à utiliser dans la tâche d’arrière‑plan
        var patient = await _context.Users.FindAsync(patientId);
        var doctor = await _context.Users.FindAsync(Input.DoctorId);

        // Envoi de l’email en arrière-plan
        _ = Task.Run(async () =>
        {
            try
            {
                string html = $@"
            <div style='font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 8px;'>
                <h2 style='color: #1b6ec2;'>Appointment Confirmation</h2>
                <p>Hello <strong>{patient?.FullName}</strong>,</p>
                <p style='line-height: 1.6;'>
                    We’re pleased to inform you that your appointment with 
                    <strong>Dr. {doctor?.FullName}</strong> has been <span style='color: green;'>successfully booked</span> for:
                </p>
                <p style='font-size: 17px; font-weight: bold; margin: 15px 0;'>
                    📅 {startTime:dddd dd MMM yyyy} at {startTime:HH:mm}
                </p>
                <p style='margin-top: 10px;'>
                    📍 <strong>Location:</strong> MedLife Hospital
                </p>
                <p style='margin-top: 20px;'>
                    You’ll find a calendar invite attached to easily add this appointment to your agenda.
                </p>
                <hr style='margin: 30px 0;' />
                <p style='color: #555;'>
                    ⏳ Once the appointment is <strong>validated by your doctor</strong>, you’ll receive another confirmation email.
                </p>
                <p style='margin-top: 30px; font-size: 14px; color: #888;'>
                    If you have any questions, feel free to reach out to our team at 
                    <a href='mailto:support@medlife.com'>support@medlife.com</a>.
                </p>
                <p style='margin-top: 40px; font-size: 13px; color: #aaa;'>
                    — The MedLife Hospital Team 🏥
                </p>
            </div>";

                string ics = GenerateIcs(appointment, $"Appointment with Dr. {doctor?.FullName}", "MedLife Hospital");

                if (patient?.Email != null)
                    await _emailService.SendWithAttachmentAsync(patient.Email, "📅 Appointment Confirmation", html, ics, "appointment.ics");
                if (doctor?.Email != null)
                    await _emailService.SendWithAttachmentAsync(doctor.Email, "👨‍⚕️ New Appointment Scheduled", html, ics, "appointment.ics");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur lors de l'envoi d'email en arrière-plan : " + ex.Message);
            }
        });

        Message = "✅ Your appointment has been booked successfully! You will receive an email confirmation if enabled, and another one once approved.";
        return Page();
    }

    private string GenerateIcs(Appointment appt, string summary, string location)
    {
        var sb = new StringBuilder();
        sb.AppendLine("BEGIN:VCALENDAR");
        sb.AppendLine("VERSION:2.0");
        sb.AppendLine("METHOD:PUBLISH");
        sb.AppendLine("BEGIN:VEVENT");
        sb.AppendLine($"UID:{Guid.NewGuid()}");
        sb.AppendLine($"DTSTAMP:{DateTime.UtcNow:yyyyMMddTHHmmssZ}");
        //sb.AppendLine($"DTSTART:{appt.StartTime.ToUniversalTime():yyyyMMddTHHmmssZ}");
        //sb.AppendLine($"DTEND:{appt.EndTime.ToUniversalTime():yyyyMMddTHHmmssZ}");
        sb.AppendLine($"DTSTART:{appt.StartTime.AddHours(-1).ToUniversalTime():yyyyMMddTHHmmssZ}");
        sb.AppendLine($"DTEND:{appt.EndTime.AddHours(-1).ToUniversalTime():yyyyMMddTHHmmssZ}");
        sb.AppendLine($"SUMMARY:{summary}");
        sb.AppendLine($"LOCATION:{location}");
        sb.AppendLine("DESCRIPTION:Appointment scheduled at MedLife Hospital");
        sb.AppendLine("END:VEVENT");
        sb.AppendLine("END:VCALENDAR");
        return sb.ToString();
    }
}

public class TimeSlot
{
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Status { get; set; } = "Available";
}

public class DoctorViewModel
{
    public string Id { get; set; } = string.Empty;
    public string FullName { get; set; } = string.Empty;
    public string Specialization { get; set; } = "General";
}=== ./Pages/Privacy.cshtml.cs ===
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace HospitalAppointmentSystem.Pages;

public class PrivacyModel : PageModel
{
    private readonly ILogger<PrivacyModel> _logger;

    public PrivacyModel(ILogger<PrivacyModel> logger)
    {
        _logger = logger;
    }

    public void OnGet()
    {
    }
}

=== ./Pages/Documentation.cshtml ===
@page
@model HospitalAppointmentSystem.Pages.Documentation
@{
    ViewData["Title"] = "Documentation";
    Layout = "_Layout";
}

<h1 class="text-center my-4">📚 Project Documentation – MedLife Hospital</h1>
<p class="text-center text-muted"><em>Default credentials: Admin: <strong><em>Admin@123</em></strong> | Doctor / Patient / Test Accounts: <strong><em>pass@123</em></strong></em></p>
<hr />

<div class="text-center mb-5">
    <a class="btn btn-outline-primary btn-lg" href="/docs/Hospital_Project_Report.pdf" target="_blank">
        📄 Download Full Project Report (PDF)
    </a>
</div>

<div class="container">
    <div class="row">
        <!-- User Roles -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-primary hover-effect">
                <div class="card-header bg-primary text-white">
                    <h3>👥 User Roles</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li><strong>Admin</strong>: Manages users, appointments, emails, and inactive periods.</li>
                        <li><strong>Doctor</strong>: Approves appointments, sets availability, manages medical records.</li>
                        <li><strong>Patient</strong>: Books appointments, provides feedback, views personal data.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Booking System -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-success hover-effect">
                <div class="card-header bg-success text-white">
                    <h3>📅 Booking System</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li>Appointments: 30-minute slots between 9 AM and 5 PM (excluding lunch break).</li>
                        <li>Only future slots allowed, excluding doctor's days off and booked times.</li>
                        <li>Doctor approval required for pending appointments.</li>
                        <li>Cancellation possible only 24h before — otherwise a polite warning is shown.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- AI Integration -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-info hover-effect">
                <div class="card-header bg-info text-white">
                    <h3>🧠 AI Integration</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li>Doctors can analyze medical records using a local AI assistant (Ollama – Qwen2.5).</li>
                        <li>Prompt engineering ensures accurate and medically relevant responses.</li>
                        <li>Secure and privacy-friendly: all runs locally.</li>
                        <li>Fallback warning if AI server is unavailable.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Email Features -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-warning hover-effect">
                <div class="card-header bg-warning text-white">
                    <h3>📧 Email Features</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li>Appointment confirmations include .ics calendar invites for Google/Outlook.</li>
                        <li>Manual emails can be sent by admins for debugging or communication.</li>
                        <li>Patients can toggle email notifications from their profile page.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Security -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-danger hover-effect">
                <div class="card-header bg-danger text-white">
                    <h3>🔐 Security</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li>Access is secured with role-based restrictions on backend and frontend.</li>
                        <li>Custom validation for booking conflicts, date logic, and business rules.</li>
                        <li>Passwords are encrypted using ASP.NET Identity best practices.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Database Design -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-lg border-secondary hover-effect">
                <div class="card-header bg-secondary text-white">
                    <h3>🗄️ Database Design</h3>
                </div>
                <div class="card-body">
                    <p>
                        Database schema available at:
                        <a href="https://dbdiagram.io/d/HospitalDB-67f00ccb4f7afba18464ef89" target="_blank">View the ER Diagram</a>
                    </p>
                    <p>Tables: Users, Appointments, Feedback, DoctorDaysOff, Prescriptions, MedicalRecords.</p>
                </div>
            </div>
        </div>

        <!-- Project Structure -->
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg border-dark hover-effect">
                <div class="card-header bg-dark text-white">
                    <h3>📂 Project Structure</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li><code>/Pages/</code>: Razor Pages (Booking, Calendar, Profile, Admin)</li>
                        <li><code>/Models/</code>: Entities (User, Appointment, Feedback, etc.)</li>
                        <li><code>/Services/</code>: Business logic (AppointmentService, EmailService, AIService)</li>
                        <li><code>/Data/</code>: `AppDbContext`, `SeedData` with default roles/users</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Functional Coverage -->
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg border-success hover-effect">
                <div class="card-header bg-success text-white">
                    <h3>✔️ Functional Coverage</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li>🗓️ Book Appointment – Calendar with slot validation</li>
                        <li>🔍 View & Filter Appointments – Filters on calendar & tables</li>
                        <li>🧾 Appointment History – Detailed per-patient</li>
                        <li>📨 Confirmations – Email with .ics</li>
                        <li>♻️ Rescheduling – Rules enforced (48h limit)</li>
                        <li>❌ Cancel Policy – 24h constraint with alert</li>
                        <li>⚠️ Warning for Restrictions – Popup + redirection</li>
                        <li>🔔 24h Reminders – Automatic email (optional)</li>
                        <li>👨‍⚕️ Doctor Search – Live filter by name/specialty</li>
                        <li>⏳ Filter by Status – Upcoming, Past, Cancelled</li>
                        <li>📬 Change Notifications – Sent on any update</li>
                        <li>🌟 Feedback – Stars + comment (1/appointment)</li>
                        <li>💻 Telehealth Ready – Field for link exists (optional)</li>
                        <li>👤 Profile & Medical Info – Editable by user</li>
                        <li>📜 Policy Display – Linked from booking and cancel screens</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Challenges -->
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg border-danger hover-effect">
                <div class="card-header bg-danger text-white">
                    <h3>🚧 Challenges & Solutions</h3>
                </div>
                <div class="card-body">
                    <ul>
                        <li><strong>Overlapping appointments:</strong> Solved with EF Core time-range queries.</li>
                        <li><strong>Blocking past/final hours:</strong> Custom logic in booking form & controller.</li>
                        <li><strong>Dynamic filtering:</strong> FullCalendar.js + AJAX + Bootstrap filters.</li>
                        <li><strong>HTML emails:</strong> Designed responsive templates for all clients.</li>
                        <li><strong>AI assistant:</strong> Custom prompt with patient data injection and fallback if offline.</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<p class="text-muted text-center mt-5">© 2025 - Dorset College Project</p>

<style>
    .hover-effect:hover {
        transform: scale(1.05);
        transition: transform 0.3s;
    }
</style>
=== ./Pages/_ViewImports.cshtml ===
﻿@using HospitalAppointmentSystem
@namespace HospitalAppointmentSystem.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
=== ./Pages/Error.cshtml ===
﻿@page
@model ErrorModel
@{
    Layout = null;
    ViewData["Title"] = "Error";
}
<html>
<head>
    <meta charset="utf-8" />
    <title>Error</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <style>
        body {
            background: linear-gradient(45deg, #6a11cb, #2575fc);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            color: #fff;
            font-family: Arial, sans-serif;
        }
        .error-container {
            text-align: center;
            animation: fadeIn 2s ease-in-out;
        }
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .error-container h1 {
            font-size: 4rem;
            margin-bottom: 20px;
        }
        .error-container p {
            font-size: 1.5rem;
            margin-bottom: 30px;
        }
        .btn-home {
            font-size: 1.2rem;
            padding: 10px 20px;
            animation: pulse 2s infinite;
        }
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
<div class="error-container">
    <h1>Oops!</h1>
    <p>You don't have access to this page 😉</p>
    <a class="btn btn-light btn-home" href="/Index">Return Home</a>
</div>
</body>
</html>=== ./Pages/DoctorDaysOff.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;

[Authorize(Roles = "Doctor,Admin")]
public class DoctorDaysOffModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public DoctorDaysOffModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    public List<ApplicationUser> Doctors { get; set; } = new();
    public List<DoctorDayOff> ExistingDaysOff { get; set; } = new();
    public string? Message { get; set; }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required]
        public DateTime Start { get; set; }

        [Required]
        public DateTime End { get; set; }

        public string? DoctorId { get; set; }
    }

    public async Task<IActionResult> OnGetAsync()
    {
        var userId = _userManager.GetUserId(User);
        if (User.IsInRole("Admin"))
        {
            Doctors = await _userManager.Users.Where(u => u.Role == "Doctor").ToListAsync();
            ExistingDaysOff = await _context.DoctorDaysOff.Include(d => d.Doctor).ToListAsync();
        }
        else
        {
            ExistingDaysOff = await _context.DoctorDaysOff
                .Where(d => d.DoctorId == userId)
                .ToListAsync();
        }

        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        var userId = _userManager.GetUserId(User);
        string doctorId = User.IsInRole("Admin") ? Input.DoctorId! : userId!;

        if (Input.Start < DateTime.Now)
        {
            ModelState.AddModelError(string.Empty, "You cannot add a day off in the past.");
            if (User.IsInRole("Admin"))
                Doctors = await _userManager.Users.Where(u => u.Role == "Doctor").ToListAsync();
            ExistingDaysOff = await _context.DoctorDaysOff.Include(d => d.Doctor).ToListAsync();
            return Page();
        }

        var overlaps = await _context.DoctorDaysOff
            .Where(d => d.DoctorId == doctorId && Input.Start < d.End && Input.End > d.Start)
            .AnyAsync();

        if (overlaps)
        {
            ModelState.AddModelError(string.Empty, "The selected time range overlaps with an existing day off.");
            if (User.IsInRole("Admin"))
                Doctors = await _userManager.Users.Where(u => u.Role == "Doctor").ToListAsync();

            ExistingDaysOff = await _context.DoctorDaysOff.Include(d => d.Doctor).ToListAsync();
            return Page();
        }

        var newDayOff = new DoctorDayOff
        {
            DoctorId = doctorId,
            Start = Input.Start,
            End = Input.End
        };

        _context.DoctorDaysOff.Add(newDayOff);
        await _context.SaveChangesAsync();
        Message = "Day off saved successfully!";
        return RedirectToPage();
    }

    public async Task<IActionResult> OnPostDeleteAsync(int id)
    {
        var off = await _context.DoctorDaysOff.FindAsync(id);
        if (off == null) return NotFound();

        _context.DoctorDaysOff.Remove(off);
        await _context.SaveChangesAsync();
        return RedirectToPage();
    }
}
=== ./Pages/Admin/ManageUsers.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Authorize(Roles = "Admin")]
public class ManageUsersModel : PageModel
{
    private readonly UserManager<ApplicationUser> _userManager;

    public ManageUsersModel(UserManager<ApplicationUser> userManager)
    {
        _userManager = userManager;
    }

    public List<ApplicationUser> Users { get; set; } = new();

    public async Task OnGetAsync()
    {
        Users = await _userManager.Users.ToListAsync();
    }

    public async Task<IActionResult> OnPostDeleteAsync(string id)
    {
        var user = await _userManager.FindByIdAsync(id);
        if (user == null) return NotFound();

        await _userManager.DeleteAsync(user);
        return RedirectToPage();
    }
}=== ./Pages/Admin/SendEmail.cshtml ===
@page
@model SendEmailModel
@{
    ViewData["Title"] = "Send Test Email";
    Layout = "_Layout";
}

<div class="d-flex justify-content-between align-items-center">
    <h2>📧 Send Email (Admin only)</h2>
    @if (User.IsInRole("Admin"))
    {
        <a class="btn btn-warning" href="/Admin/SendReminders">
            📧🔔 Envoyer des rappels
        </a>
    }
</div>

@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success">@Model.SuccessMessage</div>
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}

<form method="post">
    <div class="mb-3">
        <label class="form-label">Recipient Email</label>
        <input asp-for="Input.To" class="form-control" required />
    </div>
    <div class="mb-3">
        <label class="form-label">Subject</label>
        <input asp-for="Input.Subject" class="form-control" required />
    </div>
    <div class="mb-3">
        <label class="form-label">Message (HTML supported)</label>
        <textarea asp-for="Input.Body" class="form-control" rows="6" required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Send Email</button>
</form>=== ./Pages/Admin/EditUser.cshtml.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.EntityFrameworkCore;

public class EditUserModel : PageModel
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;

    public EditUserModel(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
    {
        _userManager = userManager;
        _roleManager = roleManager;
    }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public List<string> AllRoles { get; set; } = new();

    public class InputModel
    {
        public string Id { get; set; } = "";
        [Required]
        public string FullName { get; set; } = "";
        [Required]
        public string Email { get; set; } = "";
        [Required]
        public string Role { get; set; } = "";
        public string Specialization { get; set; } = "";
        public string? NewPassword { get; set; }
    }

    public async Task<IActionResult> OnGetAsync(string id)
    {
        var user = await _userManager.FindByIdAsync(id);
        if (user == null) return NotFound();

        var userRoles = await _userManager.GetRolesAsync(user);
        Input = new InputModel
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            Role = userRoles.FirstOrDefault() ?? "Patient", // fallback
            Specialization = user.Specialization
        };

        AllRoles = await _roleManager.Roles.Select(r => r.Name).ToListAsync();
        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        var user = await _userManager.FindByIdAsync(Input.Id);
        if (user == null) return NotFound();

        AllRoles = await _roleManager.Roles.Select(r => r.Name).ToListAsync();

        var currentRoles = await _userManager.GetRolesAsync(user);
        if (!currentRoles.Contains(Input.Role))
        {
            var remove = await _userManager.RemoveFromRolesAsync(user, currentRoles);
            if (!remove.Succeeded)
            {
                foreach (var error in remove.Errors)
                    ModelState.AddModelError(string.Empty, error.Description);
                return Page();
            }

            var add = await _userManager.AddToRoleAsync(user, Input.Role);
            if (!add.Succeeded)
            {
                foreach (var error in add.Errors)
                    ModelState.AddModelError(string.Empty, error.Description);
                return Page();
            }
        }

        user.FullName = Input.FullName;
        user.Specialization = Input.Role == "Doctor" ? Input.Specialization : null;
        user.Role = Input.Role;

        if (!string.IsNullOrWhiteSpace(Input.NewPassword))
        {
            var token = await _userManager.GeneratePasswordResetTokenAsync(user);
            var result = await _userManager.ResetPasswordAsync(user, token, Input.NewPassword);

            if (!result.Succeeded)
            {
                foreach (var error in result.Errors)
                    ModelState.AddModelError(string.Empty, error.Description);
                return Page();
            }
        }

        await _userManager.UpdateAsync(user);
        return RedirectToPage("ManageUsers");
    }
}
=== ./Pages/Admin/SendReminders.cshtml ===
@page
@model SendRemindersModel
@{
    ViewData["Title"] = "Send Reminders";
}

<h2>Send 24h Appointment Reminders</h2>

<form method="post">
    <button class="btn btn-primary">Send Now</button>
</form>

<!-- We can reload each five minutes with a cron task-->
<p class="mt-3">You can set up a cron job to run this page every 5 minutes to send reminders automatically.</p>

@if (Model.Message != null)
{
    <div class="alert alert-success mt-3">@Model.Message</div>
}
=== ./Pages/Admin/SendReminders.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

//[Authorize(Roles = "Admin")]
public class SendRemindersModel : PageModel
{
    private readonly ReminderService _reminderService;

    public SendRemindersModel(ReminderService reminderService)
    {
        _reminderService = reminderService;
    }

    public string? Message { get; set; }

    public async Task<IActionResult> OnPostAsync()
    {
        await _reminderService.SendAppointmentRemindersAsync();
        Message = "📧 Reminder emails sent for appointments in 24h.";
        return Page();
    }
}=== ./Pages/Admin/CreateUser.cshtml ===
@page
@model CreateUserModel
@{
    ViewData["Title"] = "Create New User";
}

<h2>Create New User</h2>

<form method="post">
    <div class="mb-3">
        <label class="form-label">Full Name</label>
        <input asp-for="Input.FullName" class="form-control" required />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input asp-for="Input.Email" class="form-control" required />
    </div>

    <div class="mb-3">
        <label class="form-label">Password</label>
        <input asp-for="Input.Password" type="password" class="form-control" required />
    </div>

    <div class="mb-3">
        <label class="form-label">Role</label>
        <select asp-for="Input.Role" class="form-control" id="roleDropdown">
            <option value="User">User</option>
            <option value="Doctor">Doctor</option>
            <option value="Admin">Admin</option>
        </select>
    </div>

    <div id="specializationField" class="mb-3" style="display: none;">
        <label class="form-label">Specialization (Only for Doctors)</label>
        <input asp-for="Input.Specialization" class="form-control" />
    </div>

    <button type="submit" class="btn btn-success">Create User</button>
    <a asp-page="ManageUsers" class="btn btn-secondary">Cancel</a>
</form>

<script>
    document.getElementById("roleDropdown").addEventListener("change", function () {
        document.getElementById("specializationField").style.display = this.value === "Doctor" ? "block" : "none";
    });

    window.onload = function () {
        document.getElementById("specializationField").style.display = document.getElementById("roleDropdown").value === "Doctor" ? "block" : "none";
    };
</script>=== ./Pages/Admin/ManageUsers.cshtml ===
@page
@model ManageUsersModel
@{
    ViewData["Title"] = "Manage Users";
}

<h2>Manage Users</h2>

<a asp-page="CreateUser" class="btn btn-success mb-3">+ Create New User</a>

<!-- Barre de recherche -->
<div class="mb-3">
    <input type="text" id="userSearch" class="form-control" placeholder="Search by name, email, role, or specialization...">
</div>

<table class="table table-bordered">
    <thead class="thead-dark">
    <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Role</th>
        <th>Specialization</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in Model.Users)
    {
        <tr>
            <td>@user.FullName</td>
            <td>@user.Email</td>
            <td>@user.Role</td>
            <td>
                @if (user.Role == "Doctor")
                {
                    @user.Specialization
                }
                else
                {
                    <span>-</span>
                }
            </td>
            <td>
                <a asp-page="EditUser" asp-route-id="@user.Id" class="btn btn-warning">Edit</a>
                <form method="post" asp-page-handler="Delete" asp-route-id="@user.Id" class="d-inline">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure?')">Delete</button>
                </form>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("userSearch");
            const rows = document.querySelectorAll("tbody tr");

            searchInput.addEventListener("keyup", function () {
                const query = this.value.toLowerCase();

                rows.forEach(row => {
                    const cells = row.querySelectorAll("td");
                    const matches = Array.from(cells).some(cell => cell.innerText.toLowerCase().includes(query));
                    row.style.display = matches ? "" : "none";
                });
            });
        });
    </script>
}
=== ./Pages/Admin/EditUser.cshtml ===
@page
@model EditUserModel
@{
    ViewData["Title"] = "Edit User";
}

<h2>Edit User</h2>

<form method="post">
    <input type="hidden" asp-for="Input.Id" />

    <div class="mb-3">
        <label class="form-label">Full Name</label>
        <input asp-for="Input.FullName" class="form-control" required />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input asp-for="Input.Email" class="form-control" required readonly />
    </div>

    <div class="mb-3">
        <label class="form-label">Role</label>
        <select asp-for="Input.Role" class="form-control" id="roleDropdown">
            @foreach (var role in Model.AllRoles)
            {
                <option value="@role" selected="@(role == Model.Input.Role)">
                    @role
                </option>
            }
        </select>
    </div>

    <div id="specializationField" class="mb-3" style="display: none;">
        <label class="form-label">Specialization (Only for Doctors)</label>
        <input asp-for="Input.Specialization" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">New Password (Leave blank to keep current)</label>
        <input asp-for="Input.NewPassword" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <a asp-page="ManageUsers" class="btn btn-secondary">Cancel</a>
</form>

<script>
    const roleDropdown = document.getElementById("roleDropdown");
    const specField = document.getElementById("specializationField");

    function toggleSpecialization() {
        specField.style.display = roleDropdown.value === "Doctor" ? "block" : "none";
    }

    roleDropdown.addEventListener("change", toggleSpecialization);
    window.onload = toggleSpecialization;
</script>
=== ./Pages/Admin/SendEmail.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;

[Authorize(Roles = "Admin")]
public class SendEmailModel : PageModel
{
    private readonly EmailService _emailService;

    public SendEmailModel(EmailService emailService)
    {
        _emailService = emailService;
    }

    [BindProperty]
    public EmailInput Input { get; set; } = new();

    public string? SuccessMessage { get; set; }
    public string? ErrorMessage { get; set; }

    public class EmailInput
    {
        [Required, EmailAddress]
        public string To { get; set; } = "";

        [Required]
        public string Subject { get; set; } = "";

        [Required]
        public string Body { get; set; } = "";
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid) return Page();

        try
        {
            await _emailService.SendAsync(Input.To, Input.Subject, Input.Body);
            SuccessMessage = "✅ Email sent successfully!";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"❌ Failed to send email: {ex.Message}";
        }

        return Page();
    }
}=== ./Pages/Admin/CreateUser.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

[Authorize(Roles = "Admin")]
public class CreateUserModel : PageModel
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;

    public CreateUserModel(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
    {
        _userManager = userManager;
        _roleManager = roleManager;
    }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required]
        public string FullName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        public string Role { get; set; }

        public string? Specialization { get; set; } // ✅ Nullable to avoid errors
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid)
        {
            return Page();
        }

        var user = new ApplicationUser
        {
            UserName = Input.Email,
            Email = Input.Email,
            FullName = Input.FullName,
            Role = Input.Role,
            Specialization = Input.Role == "Doctor" ? Input.Specialization : null // ✅ Ensure NULL if not a doctor
        };

        var result = await _userManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            // Ensure role exists
            if (!await _roleManager.RoleExistsAsync(Input.Role))
            {
                await _roleManager.CreateAsync(new IdentityRole(Input.Role));
            }

            // Assign role to user
            await _userManager.AddToRoleAsync(user, Input.Role);

            return RedirectToPage("ManageUsers");
        }

        foreach (var error in result.Errors)
        {
            ModelState.AddModelError(string.Empty, error.Description);
        }

        return Page();
    }
}=== ./Pages/ErrorDebug.cshtml.cs ===
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace HospitalAppointmentSystem.Pages;

[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
[IgnoreAntiforgeryToken]
public class ErrorDebugModel : PageModel
{
    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    private readonly ILogger<ErrorModel> _logger;

    public ErrorDebugModel(ILogger<ErrorModel> logger)
    {
        _logger = logger;
    }

    public void OnGet()
    {
        RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
    }
}

=== ./Pages/Documentation.cshtml.cs ===
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace HospitalAppointmentSystem.Pages;

public class Documentation : PageModel
{
    public void OnGet()
    {
        
    }
}=== ./Pages/Calendar.cshtml ===
@page
@model CalendarModel
@attribute [Authorize]
<!-- Restreindre l'accès aux utilisateurs connectés -->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Appointment Calendar";
    var isAdmin = User.IsInRole("Admin");
    var isDoctor = User.IsInRole("Doctor");
    var doctorId = isDoctor ? User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value : null;
    var doctorSpecialization = isDoctor ? User.FindFirst("Specialization")?.Value : null;
}

<h2>@ViewData["Title"]</h2>

@if (isAdmin)
{
    <!-- Filtres pour l'Admin -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="doctorFilter" class="form-label">Filter by Doctor:</label>
            <select id="doctorFilter" class="form-select">
                <option value="">All</option>
                @foreach (var doctor in Model.Doctors)
                {
                    <option value="@doctor.Id">@doctor.FullName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="specialtyFilter" class="form-label">Filter by Specialization:</label>
            <select id="specialtyFilter" class="form-select">
                <option value="">All</option>
                @foreach (var specialty in Model.Specializations.Distinct())
                {
                    <option value="@specialty">@specialty</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="statusFilter" class="form-label">Filter by Status:</label>
            <select id="statusFilter" class="form-select">
                <option value="">All</option>
                <option value="Pending">Pending</option>
                <option value="Approved">Approved</option>
                <option value="Rejected">Rejected</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="targetDate" class="form-label">Go to Date:</label>
            <input type="date" id="targetDate" class="form-control" />
        </div>
    </div>
}
else if (isDoctor)
{
    <!-- Pour Docteur : pas de filtres, valeurs fixées automatiquement -->
    <input type="hidden" id="doctorFilter" value="@doctorId" />
    <input type="hidden" id="specialtyFilter" value="@doctorSpecialization" />
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="statusFilter" class="form-label">Filter by Status:</label>
            <select id="statusFilter" class="form-select">
                <option value="">All</option>
                <option value="Pending">Pending</option>
                <option value="Approved">Approved</option>
                <option value="Rejected">Rejected</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="targetDate" class="form-label">Go to Date:</label>
            <input type="date" id="targetDate" class="form-control" />
        </div>
    </div>
}
else
{
    <!-- Pour Patient : on garde tous les filtres -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="doctorFilter" class="form-label">Filter by Doctor:</label>
            <select id="doctorFilter" class="form-select">
                <option value="">All</option>
                @foreach (var doctor in Model.Doctors)
                {
                    <option value="@doctor.Id">@doctor.FullName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="specialtyFilter" class="form-label">Filter by Specialization:</label>
            <select id="specialtyFilter" class="form-select">
                <option value="">All</option>
                @foreach (var specialty in Model.Specializations.Distinct())
                {
                    <option value="@specialty">@specialty</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="statusFilter" class="form-label">Filter by Status:</label>
            <select id="statusFilter" class="form-select">
                <option value="">All</option>
                <option value="Pending">Pending</option>
                <option value="Approved">Approved</option>
                <option value="Rejected">Rejected</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="targetDate" class="form-label">Go to Date:</label>
            <input type="date" id="targetDate" class="form-control" />
        </div>
    </div>
}

<div id="calendar" style="max-height: 75vh; overflow-y: auto;"></div>

<!-- Modal for Appointment Details -->
<div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-labelledby="eventDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content shadow">
            <div class="modal-header">
                <h5 class="modal-title" id="eventDetailsModalLabel">Appointment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Title:</strong> <span id="eventTitle"></span></p>
                <p><strong>Date:</strong> <span id="eventDate"></span></p>
                <p><strong>Time:</strong> <span id="eventTime"></span></p>
                <p><strong>Doctor:</strong> <span id="eventDoctor"></span></p>
                <p><strong>Patient:</strong> <span id="eventPatient"></span></p>
                <p><strong>Specialization:</strong> <span id="eventSpecialty"></span></p>
                <p><strong>Status:</strong> <span id="eventStatus"></span></p>
            </div>
            <div class="modal-footer">
                <a id="editLink" class="btn btn-warning" href="/Appointments/ManageAppointments">Edit</a>

                <!-- ✅ input TOUJOURS présent -->
                <form method="post" asp-page-handler="Delete" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="eventIdToDelete" name="id" />
                    @if (User.IsInRole("Admin") || User.IsInRole("Patient") || User.IsInRole("Doctor"))
                    {
                        <button type="submit" class="btn btn-danger">Delete</button>
                    }
                </form>

                @if (User.IsInRole("Doctor"))
                {
                    <form method="post" asp-page-handler="Accept" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="eventIdToAccept" name="id" />
                        <button type="submit" class="btn btn-success" id="acceptButton">Accept</button>
                    </form>
                }

                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .fc-bg-event {
        pointer-events: none !important;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script>
        const currentUserId = '@User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value';
        const doctorSpecialization = '@doctorSpecialization';
        const isDoctor = @(isDoctor.ToString().ToLower());

        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                locale: 'en',
                initialView: 'dayGridMonth',
                height: "auto",
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: function(fetchInfo, successCallback, failureCallback) {
                    let query = '?handler=Events';
                    if (@(isAdmin.ToString().ToLower()))
                    {
                        const doctorId = document.getElementById('doctorFilter').value;
                        const specialty = document.getElementById('specialtyFilter').value;
                        const status = document.getElementById('statusFilter').value;
                        query += `&doctorId=${doctorId}&specialization=${specialty}&status=${status}`;
                    }
                    else if (isDoctor)
                    {
                        const status = document.getElementById('statusFilter').value;
                        query += `&doctorId=${currentUserId}&specialization=${doctorSpecialization}&status=${status}`;
                    }
                    else
                    {
                        const doctorId = document.getElementById('doctorFilter').value;
                        const specialty = document.getElementById('specialtyFilter').value;
                        const status = document.getElementById('statusFilter').value;
                        query += `&doctorId=${doctorId}&specialization=${specialty}&status=${status}`;
                    }
                    fetch('/Calendar' + query)
                        .then(response => response.json())
                        .then(data => successCallback(data))
                        .catch(error => failureCallback(error));
                },
                eventClick: function (info) {
                    if (info.event.display && info.event.display === "background") return;

                    document.getElementById('eventTitle').textContent = info.event.title;
                    document.getElementById('eventDate').textContent = info.event.start.toLocaleDateString('en-US');
                    document.getElementById('eventTime').textContent = info.event.start.toLocaleTimeString('en-US');
                    document.getElementById('eventDoctor').textContent = info.event.extendedProps.doctor;
                    document.getElementById('eventPatient').textContent = info.event.extendedProps.patient;
                    document.getElementById('eventSpecialty').textContent = info.event.extendedProps.specialization;
                    document.getElementById('eventStatus').textContent = info.event.extendedProps.status;

                    const deleteInput = document.getElementById('eventIdToDelete');
                    if (deleteInput) deleteInput.value = info.event.id;

                    const acceptInput = document.getElementById('eventIdToAccept');
                    if (acceptInput) acceptInput.value = info.event.id;

                    const editLink = document.getElementById('editLink');
                    if (editLink) editLink.href = `/Appointments/ManageAppointments?id=${info.event.id}`;

                    // Masquer le bouton "Accept" si le rendez-vous est déjà approuvé
                    const acceptButton = document.getElementById('acceptButton');
                    if (acceptButton) {
                        if (info.event.extendedProps.status === "Approved") {
                            acceptButton.style.display = 'none';
                        } else {
                            acceptButton.style.display = 'inline-block';
                        }
                    }

                    new bootstrap.Modal(document.getElementById('eventDetailsModal')).show();
                },
                dateClick: function(info) {
                    if (isDoctor) {
                        alert("You can't book an appointment as a doctor. You need to be a patient.");
                        return;
                    }
                    window.location.href = `/Appointments/BookAppointment?date=${encodeURIComponent(info.dateStr)}&doctorId=${document.getElementById('doctorFilter').value}`;
                }
            });

            calendar.render();

            document.getElementById('targetDate').addEventListener('change', function () {
                const date = this.value;
                if (date) calendar.gotoDate(date);
            });

            if (@(isAdmin.ToString().ToLower()))
            {
                document.getElementById('doctorFilter').addEventListener('change', () => calendar.refetchEvents());
                document.getElementById('specialtyFilter').addEventListener('change', () => calendar.refetchEvents());
                document.getElementById('statusFilter').addEventListener('change', () => calendar.refetchEvents());
            }
            else if (isDoctor)
            {
                document.getElementById('statusFilter').addEventListener('change', () => calendar.refetchEvents());
            }
            else
            {
                document.getElementById('doctorFilter').addEventListener('change', () => calendar.refetchEvents());
                document.getElementById('specialtyFilter').addEventListener('change', () => calendar.refetchEvents());
                document.getElementById('statusFilter').addEventListener('change', () => calendar.refetchEvents());
            }
});
    </script>
}
=== ./Pages/Feedbacks.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;

namespace HospitalAppointmentSystem.Pages;

[Authorize(Roles = "Admin,Doctor")]
public class FeedbacksModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public FeedbacksModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    public List<FeedbackViewModel> Feedbacks { get; set; } = new();

    public class FeedbackViewModel
    {
        public string PatientName { get; set; } = "";
        public string DoctorName { get; set; } = "";
        public DateTime Date { get; set; }
        public int Rating { get; set; }
        public string? Comment { get; set; }
    }

    public async Task OnGetAsync()
    {
        var user = await _userManager.GetUserAsync(User);
        var isAdmin = await _userManager.IsInRoleAsync(user, "Admin");
        var isDoctor = await _userManager.IsInRoleAsync(user, "Doctor");

        var query = _context.Feedbacks
            .Include(f => f.Doctor)
            .Include(f => f.Patient)
            .Include(f => f.Appointment)
            .AsQueryable();

        if (isDoctor)
        {
            query = query.Where(f => f.DoctorId == user.Id);
        }

        Feedbacks = await query.Select(f => new FeedbackViewModel
        {
            PatientName = f.Patient.FullName,
            DoctorName = f.Doctor.FullName,
            Date = f.Appointment.StartTime,
            Rating = f.Rating,
            Comment = f.Comment
        }).OrderByDescending(f => f.Date).ToListAsync();
    }
}=== ./Pages/Shared/_Layout.cshtml ===
﻿@using System.Security.Claims
@RenderSection("Head", required: false)
@using Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en">
<style>
    .navbar-nav .nav-link,
    .navbar-nav .btn {
        transition: all 0.3s ease-in-out;
    }

    .navbar-nav .nav-link:hover,
    .navbar-nav .btn:hover {
        color: #1b6ec2 !important;
        transform: translateY(-2px);
    }

    .navbar-nav .btn {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

    .navbar-nav .btn:hover {
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.1);
    }
</style>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MedLife Hospital</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/HospitalAppointmentSystem.styles.css" asp-append-version="true" />
</head>
<body>
<header>
    <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container">
            <!-- <a class="navbar-brand" asp-area="" asp-page="/Index">MedLife Hospital</a> -->
            <a class="navbar-brand d-flex align-items-center" asp-area="" asp-page="/Index">
                <img src="~/images/logo.png" alt="MedLife Logo" style="height: 40px;" class="me-2" />
                <!-- <span class="fw-bold text-primary">MedLife Hospital</span> -->
            </a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                @if (User.Identity is { IsAuthenticated: true })
                {
                    @if (User.IsInRole("Patient"))
                    {
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                        </li>
                    }
                }
                <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                    </li>

                    @if (!User.Identity!.IsAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="btn btn-outline-primary" asp-page="/Documentation">Documentation</a>
                        </li>
                    }

                    @* Role-Based Navigation *@
                    @if (User.Identity.IsAuthenticated)
                    {
                        @if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Admin/ManageUsers">Roles</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Appointments/ManageAppointments">Appointments</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/DoctorDaysOff">Days-Off</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Admin/SendEmail">Email</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Prescriptions/Prescriptions">Prescriptions</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Calendar">Calendar</a>
                            </li>
                        }

                        @if (User.IsInRole("Doctor"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Appointments/ManageAppointments">Appointments</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/DoctorDaysOff">Days-Off</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/MedicalRecords">MedicalRecords</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Prescriptions/Prescriptions">Prescriptions</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Calendar">Calendar</a>
                            </li>
                        }

                        @if (User.IsInRole("Patient"))
                        {
                            <li class="nav-item">
                                <a class="btn btn-primary mx-2" asp-page="/Appointments/BookAppointment">📅 Book Appointment</a>
                            </li>
                            <!--
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Appointments/ManageAppointments">Appointments</a>
                            </li>
                            -->
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Prescriptions/Prescriptions">Prescriptions</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-page="/Calendar">Calendar</a>
                            </li>
                        }
                    }
                </ul>

                @* Login/Register or Logout *@
                <ul class="navbar-nav">
                    @if (User.Identity.IsAuthenticated)
                    {
                        string emoji = "👤";
                        if (User.IsInRole("Admin")) emoji = "🛠️";
                        else if (User.IsInRole("Doctor")) emoji = "🧑‍⚕️";

                        <li class="nav-item d-flex align-items-center">
                            <a href="/Account/Profile" class="nav-link text-dark me-3">
                                @emoji @User.Identity.Name
                            </a>
                        </li>
                        <li class="nav-item">
                            <form method="post" asp-page="/Account/Logout" class="d-inline">
                                <button type="submit" class="btn btn-danger">Logout</button>
                            </form>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="btn btn-outline-primary me-2" asp-page="/Account/Login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="btn btn-outline-secondary" asp-page="/Account/Register">Register</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>

<div class="container">
    <main role="main" class="pb-3">
        @RenderBody()
    </main>
</div>

<!-- Footer ->
<footer class="footer text-center border-top py-3 mt-auto">
    <div class="container">
        &copy; 2025 - MedLife Hospital - <a asp-page="/Privacy">Privacy</a>
    </div>
</footer>
-->

@{
    var currentPath = Context.Request.Path.Value?.ToLowerInvariant();
}
@if (currentPath == "/" || currentPath == "/privacy")
{
    <footer class="footer text-center border-top py-3 mt-auto">
        <div class="container">
            &copy; 2025 - MedLife Hospital - <a asp-page="/Privacy">Privacy</a>
        </div>
    </footer>
}


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

@RenderSection("Scripts", required: false)
</body>
</html>=== ./Pages/Shared/_ValidationScriptsPartial.cshtml ===
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>
=== ./Pages/Feedback/AddFeedback.cshtml ===
@page
@model AddFeedbackModel
@{
    ViewData["Title"] = "Leave Feedback";
}

<h2>Leave Feedback for @Model.DoctorName</h2>

<form method="post">
    <input type="hidden" asp-for="Input.AppointmentId" />
    <div class="mb-3">
        <label asp-for="Input.Rating"></label>
        <select asp-for="Input.Rating" class="form-select" required>
            <option value="">-- Choose --</option>
            @for (int i = 1; i <= 5; i++)
            {
                <option value="@i">@i ★</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label asp-for="Input.Comment">Comment (optional)</label>
        <textarea asp-for="Input.Comment" class="form-control" rows="4"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Submit Feedback</button>
</form>
=== ./Pages/Feedback/AddFeedback.cshtml.cs ===
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;

namespace HospitalAppointmentSystem.Pages.Feedback;

[Authorize(Roles = "Patient")]
public class AddFeedbackModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public AddFeedbackModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    [BindProperty]
    public FeedbackInput Input { get; set; } = new();

    public string DoctorName { get; set; } = "";

    public class FeedbackInput
    {
        [Range(1, 5)]
        public int Rating { get; set; }

        public string? Comment { get; set; }

        public int AppointmentId { get; set; }
    }

    public async Task<IActionResult> OnGetAsync(int appointmentId)
    {
        var user = await _userManager.GetUserAsync(User);
        var appointment = await _context.Appointments
            .Include(a => a.Doctor)
            .FirstOrDefaultAsync(a => a.Id == appointmentId && a.PatientId == user.Id);

        if (appointment == null || appointment.Status != "Completed")
            return NotFound();

        DoctorName = appointment.Doctor.FullName;

        var already = await _context.Feedbacks.AnyAsync(f => f.AppointmentId == appointmentId);
        if (already)
            return RedirectToPage("/Feedback/AlreadySubmitted");

        Input.AppointmentId = appointmentId;
        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid) return Page();

        var user = await _userManager.GetUserAsync(User);
        var appointment = await _context.Appointments
            .Include(a => a.Doctor)
            .FirstOrDefaultAsync(a => a.Id == Input.AppointmentId && a.PatientId == user.Id);

        if (appointment == null || appointment.Status != "Completed")
            return NotFound();

        var already = await _context.Feedbacks.AnyAsync(f => f.AppointmentId == appointment.Id);
        if (already) return RedirectToPage("/Feedback/AlreadySubmitted");

        _context.Feedbacks.Add(new global::Feedback
        {
            Rating = Input.Rating,
            Comment = Input.Comment,
            PatientId = user.Id,
            DoctorId = appointment.DoctorId,
            AppointmentId = appointment.Id
        });

        await _context.SaveChangesAsync();
        return RedirectToPage("/Feedback/Thanks");
    }
}
=== ./Pages/Calendar.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;

[Authorize]
public class CalendarModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public CalendarModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    public List<ApplicationUser> Doctors { get; set; } = new();
    public List<string> Specializations { get; set; } = new();
    public string? SelectedDoctorId { get; set; }
    public string? SelectedStatus { get; set; }
    public string? SelectedSpecialization { get; set; }

    public async Task<IActionResult> OnGetAsync(string? doctorId, string? specialization, string? status)
    {
        Doctors = await _context.Users
            .Where(u => u.Role == "Doctor")
            .OrderBy(d => d.FullName)
            .ToListAsync();

        Specializations = Doctors
            .Where(d => !string.IsNullOrEmpty(d.Specialization))
            .Select(d => d.Specialization!)
            .Distinct()
            .OrderBy(s => s)
            .ToList();

        SelectedDoctorId = doctorId;
        SelectedStatus = status;
        SelectedSpecialization = specialization;

        return Page();
    }

    public async Task<IActionResult> OnGetEventsAsync(string? doctorId, string? specialization, string? status)
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            var isAdmin = User.IsInRole("Admin");
            var isDoctor = User.IsInRole("Doctor");
            var isPatient = User.IsInRole("Patient");

            var query = _context.Appointments
                .Include(a => a.Doctor)
                .Include(a => a.Patient)
                .AsQueryable();

            // 🔒 Restriction des rendez-vous visibles selon le rôle
            if (!isAdmin)
            {
                if (isDoctor)
                {
                    query = query.Where(a => a.DoctorId == user.Id);
                }
                else if (isPatient)
                {
                    query = query.Where(a => a.PatientId == user.Id);
                }
            }
            else if (!string.IsNullOrEmpty(doctorId))
            {
                query = query.Where(a => a.DoctorId == doctorId);
            }

            if (!string.IsNullOrEmpty(status))
                query = query.Where(a => a.Status == status);

            if (!string.IsNullOrEmpty(specialization))
                query = query.Where(a => a.Doctor.Specialization == specialization);

            // ✅ Génération des événements avec title & props sûrs
            var appointmentEvents = await query.Select(a => new
            {
                id = a.Id,
                title =
                    isAdmin ? $"🧑 {a.Patient.FullName} – {a.Status}" :
                    isDoctor ? $"Appointment with {a.Patient.FullName}" :
                    $"Appointment with Dr. {a.Doctor.FullName}",
                start = a.StartTime,
                end = a.EndTime,
                color = a.Status == "Approved" ? "#198754" :
                        a.Status == "Pending" ? "#ffc107" :
                        a.Status == "Rejected" ? "#dc3545" : "#6c757d",
                extendedProps = new
                {
                    doctor = a.Doctor.FullName ?? "Unknown",
                    patient = a.Patient.FullName ?? "Unknown",
                    specialization = a.Doctor.Specialization ?? "N/A",
                    status = a.Status
                }
            }).ToListAsync();

            // ✅ Ajouter Lunch Breaks uniquement pour les docteurs
            var lunchBreaks = new List<object>();
            if (isDoctor)
            {
                for (int i = -365; i <= 365; i++)
                {
                    var date = DateTime.Today.AddDays(i);
                    lunchBreaks.Add(new
                    {
                        start = date.AddHours(12),
                        end = date.AddHours(13),
                        title = "Lunch Break",
                        color = "#ffcc00",
                        display = "background"
                    });
                }
            }

            var events = appointmentEvents.Concat(lunchBreaks);
            return new JsonResult(events);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
            return StatusCode(500, new { message = "Internal server error", details = ex.Message });
        }
    }

    public async Task<IActionResult> OnGetDoctorDetailsAsync(string doctorId)
    {
        if (string.IsNullOrEmpty(doctorId))
            return BadRequest("Doctor ID is required.");

        var daysOff = await _context.DoctorDaysOff
            .Where(d => d.DoctorId == doctorId)
            .Select(d => new
            {
                start = d.Start,
                end = d.End,
                title = "Day Off",
                color = "#e0e0e0",
                display = "background"
            })
            .ToListAsync();

        return new JsonResult(daysOff);
    }

    public async Task<IActionResult> OnPostDeleteAsync(int id)
    {
        var appointment = await _context.Appointments.FindAsync(id);
        if (appointment == null) return NotFound();

        var userId = _userManager.GetUserId(User);
        var user = await _userManager.FindByIdAsync(userId);
        var isAdmin = await _userManager.IsInRoleAsync(user, "Admin");

        var isDoctor = appointment.DoctorId == userId;
        var isPatient = appointment.PatientId == userId;

        if (!isAdmin && isPatient && (appointment.StartTime - DateTime.Now).TotalHours < 24)
        {
            TempData["ErrorMessage"] = "You can’t cancel less than 24 hours before the appointment.";
            return RedirectToPage();
        }

        if (!(isAdmin || isDoctor || isPatient))
            return Forbid();

        _context.Appointments.Remove(appointment);
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }

    public async Task<IActionResult> OnPostAcceptAsync(int id)
    {
        var appointment = await _context.Appointments.FindAsync(id);
        if (appointment == null) return NotFound();

        var userId = _userManager.GetUserId(User);
        if (appointment.DoctorId != userId) return Forbid();

        appointment.Status = "Approved";
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }
}
=== ./Pages/MedicalRecords.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using Markdig;

[Authorize]
public class MedicalRecordsModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly IConfiguration _configuration;

    public MedicalRecordsModel(
        AppDbContext context,
        UserManager<ApplicationUser> userManager,
        IHttpClientFactory httpClientFactory,
        IConfiguration configuration)
    {
        _context = context;
        _userManager = userManager;
        _httpClientFactory = httpClientFactory;
        _configuration = configuration;
    }

    public List<MedicalRecord> Records { get; set; } = new();
    public List<ApplicationUser> AllPatients { get; set; } = new();
    public ApplicationUser? SelectedPatient { get; set; }
    public bool AIDisabled { get; set; } = false;

    [BindProperty]
    public string? ChatInput { get; set; }

    public List<string> ChatHistory { get; set; } = new();

    public async Task<IActionResult> OnGetAsync(string? patientId)
    {
        var currentUser = await _userManager.GetUserAsync(User);

        if (User.IsInRole("Doctor"))
        {
            AllPatients = await _userManager.Users
                .Where(u => u.Role == "Patient")
                .OrderBy(u => u.FullName)
                .ToListAsync();

            if (!string.IsNullOrEmpty(patientId))
            {
                SelectedPatient = await _userManager.FindByIdAsync(patientId);
                if (SelectedPatient != null)
                {
                    Records = await _context.MedicalRecords
                        .Where(r => r.PatientId == patientId)
                        .OrderByDescending(r => r.Date)
                        .ToListAsync();
                }
            }
        }
        else
        {
            Records = await _context.MedicalRecords
                .Where(r => r.PatientId == currentUser.Id)
                .OrderByDescending(r => r.Date)
                .ToListAsync();
        }

        ChatHistory = HttpContext.Session.GetString("ChatHistory")?.Split("|||").ToList() ?? new();
        return Page();
    }

    public async Task<IActionResult> OnPostAsync(string PatientId, string Title, string Description, DateTime Date)
    {
        if (!User.IsInRole("Doctor")) return Forbid();

        _context.MedicalRecords.Add(new MedicalRecord
        {
            PatientId = PatientId,
            Title = Title,
            Description = Description,
            Date = Date
        });

        await _context.SaveChangesAsync();
        return RedirectToPage(new { patientId = PatientId });
    }

    public async Task<IActionResult> OnPostDeleteAsync(int id)
    {
        var record = await _context.MedicalRecords.FindAsync(id);
        if (record == null) return NotFound();
        if (!User.IsInRole("Doctor")) return Forbid();

        _context.MedicalRecords.Remove(record);
        await _context.SaveChangesAsync();
        return RedirectToPage(new { patientId = record.PatientId });
    }

    public async Task<IActionResult> OnPostChatAsync(string patientId)
    {
        var records = await _context.MedicalRecords
            .Where(r => r.PatientId == patientId)
            .OrderBy(r => r.Date)
            .ToListAsync();

        var history = HttpContext.Session.GetString("ChatHistory")?.Split("|||").ToList() ?? new();
        var now = DateTime.Now.ToString("HH:mm");
        history.Add($"<div class='chat-bubble doctor'><strong class='you-label'>👨‍⚕️ You:</strong>{ChatInput}<div class='chat-time'>{now}</div></div>");

        var prompt = new StringBuilder();
        prompt.AppendLine("You are a helpful and expert medical assistant. You are here to assist the doctor in providing medical advice.");
        prompt.AppendLine("You have read all Pubmed and Vidal. You NEED to answer the question in a very concise and precise way.");
        prompt.AppendLine("⚠️ You MUST answer in English ONLY.");
        prompt.AppendLine("Here is the medical history of the patient:");
        prompt.AppendLine($"- Patient: {records.FirstOrDefault()?.Patient?.FullName}");
        foreach (var r in records)
            prompt.AppendLine($"- {r.Date:dd MMM yyyy} – {r.Title}: {r.Description}");
        prompt.AppendLine("\nConversation so far:");
        foreach (var msg in history)
            prompt.AppendLine(Markdig.Markdown.ToPlainText(msg));

        try
        {
            var modelName = _configuration["AISettings:Model"] ?? "qwen2.5:0.5b";
            var client = _httpClientFactory.CreateClient();
            var response = await client.PostAsJsonAsync("http://localhost:11434/api/generate", new
            {
                model = modelName,
                prompt = prompt.ToString(),
                stream = false
            });

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var reply = json.GetProperty("response").GetString();
                var html = Markdig.Markdown.ToHtml(reply ?? "");
                history.Add($"<div class='chat-bubble ai'><strong>🤖 AI:</strong><br>{html}<div class='chat-time'>{now}</div></div>");
                HttpContext.Session.SetString("ChatHistory", string.Join("|||", history));
            }
            else
            {
                AIDisabled = true;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Ollama error: " + ex.Message);
            AIDisabled = true;
        }

        return Redirect("/MedicalRecords?patientId=" + patientId + "#chat");
    }

    public IActionResult OnPostResetChat(string patientId)
    {
        HttpContext.Session.Remove("ChatHistory");
        return RedirectToPage(new { patientId });
    }
}
=== ./Pages/Error.cshtml.cs ===
using Microsoft.AspNetCore.Mvc.RazorPages;

public class ErrorModel : PageModel
{
    public void OnGet() { }
}=== ./Pages/MedicalRecords.cshtml ===
@page
@model MedicalRecordsModel
@{
    ViewData["Title"] = "Medical Records";
    Layout = "_Layout";
}

<style>
    .chat-bubble {
        max-width: 75%;
        padding: 10px 14px;
        border-radius: 18px;
        margin-bottom: 10px;
        word-wrap: break-word;
        display: inline-block;
    }
    .chat-bubble.doctor {
        background-color: #d4e3f8;
        color: #003366;
        text-align: left;
        float: right;
        clear: both;
    }
    .chat-bubble.ai {
        background-color: #f2f2f2;
        color: #333;
        float: left;
        clear: both;
    }

    .chat-bubble.doctor .you-label {
        display: block;
        text-align: left;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .chat-time {
        font-size: 0.8rem;
        color: #888;
        margin-top: 4px;
        text-align: right;
    }
    .chat-bubble.ai .chat-time {
        text-align: left;
    }
</style>

<h2>Medical Records</h2>

@if (User.IsInRole("Doctor"))
{
    <form method="get" class="mb-3">
        <label>Select Patient:</label>
        <select name="patientId" onchange="this.form.submit()" class="form-control w-auto d-inline">
            <option value="">-- Select --</option>
            @foreach (var patient in Model.AllPatients)
            {
                <option value="@patient.Id" selected="@(Model.SelectedPatient?.Id == patient.Id)">
                    @patient.FullName (@patient.Email)
                </option>
            }
        </select>
    </form>
}

@if (Model.SelectedPatient != null)
{
    <h4>🧑 Patient: @Model.SelectedPatient.FullName</h4>

    <form method="post">
        <input type="hidden" name="PatientId" value="@Model.SelectedPatient.Id" />
        <div class="mb-2"><label>Title</label><input name="Title" class="form-control" required /></div>
        <div class="mb-2"><label>Description</label><textarea name="Description" class="form-control"></textarea></div>
        <div class="mb-2"><label>Date</label><input name="Date" type="date" class="form-control" required /></div>
        <button class="btn btn-success">Add Record</button>
    </form>

    <hr />

    <h4 id="chat">💬 Medical Assistant Chat</h4>

    <div class="chat-box border rounded bg-light p-3 mb-2" style="max-height: 300px; overflow-y: auto;" id="chatContainer">
        @if (Model.ChatHistory.Any())
        {
            int i = 0;
            foreach (var msg in Model.ChatHistory)
            {
                var anchor = msg.Contains("doctor") ? $"id='last-doctor-{i++}'" : "";
                <div class="chat-message" @Html.Raw(anchor)>@Html.Raw(msg)</div>
            }
        }
        else
        {
            <p class="text-muted">Start the conversation by asking a question.</p>
        }
    </div>

    <form method="post" asp-page-handler="Chat" id="chatForm" class="d-flex gap-2 mb-3" asp-route-patientId="@Model.SelectedPatient.Id">
        <input asp-for="ChatInput" name="ChatInput" class="form-control" placeholder="Ask about this patient..." required />
        <button class="btn btn-primary" type="submit">Ask</button>
    </form>

    <form method="post" asp-page-handler="ResetChat" asp-route-patientId="@Model.SelectedPatient.Id">
        <button class="btn btn-sm btn-outline-secondary">Reset Chat</button>
    </form>

    <div id="loading" class="alert alert-info d-none mt-2">
        🤖 Analyzing with AI... Please wait...
    </div>

    @if (Model.AIDisabled)
    {
        <div class="alert alert-warning mt-3">⚠️ AI chat unavailable (Ollama not running)</div>
    }
}

@if (Model.Records.Any())
{
    <h4 class="mt-4">📋 Records</h4>
    <table class="table table-bordered">
        <thead>
        <tr><th>Date</th><th>Title</th><th>Description</th>@if (User.IsInRole("Doctor")) { <th>Actions</th> }</tr>
        </thead>
        <tbody>
        @foreach (var rec in Model.Records)
        {
            <tr>
                <td>@rec.Date.ToString("dd MMM yyyy")</td>
                <td>@rec.Title</td>
                <td>@rec.Description</td>
                @if (User.IsInRole("Doctor"))
                {
                    <td>
                        <form method="post" asp-page-handler="Delete" asp-route-id="@rec.Id">
                            <button class="btn btn-sm btn-danger" onclick="return confirm('Delete this record?')">🗑 Delete</button>
                        </form>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        document.getElementById("chatForm").addEventListener("submit", function () {
            document.getElementById("loading").classList.remove("d-none");
        });

        window.onload = function () {
            const lastDoctor = document.querySelector("[id^='last-doctor']");
            const chatBox = document.getElementById("chatContainer");
            if (lastDoctor) {
                lastDoctor.scrollIntoView({ behavior: "smooth", block: "center" });
            } else if (chatBox) {
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            const chatSection = document.getElementById("chat");
            if (chatSection && window.location.hash === "#chat") {
                chatSection.scrollIntoView({ behavior: 'smooth' });
            }
        };
    </script>
}
=== ./Pages/Account/Register.cshtml ===
@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(120deg, #e6f0fa, #ffffff);
        height: 100vh;
        overflow-x: hidden;
        overflow-y: auto;
        position: relative;
    }

    body::before {
        content: '';
        position: absolute;
        width: 700px;
        height: 700px;
        background: radial-gradient(circle, rgba(27,110,194,0.2) 0%, transparent 70%);
        top: -200px;
        left: -200px;
        animation: floatGlow 12s ease-in-out infinite;
        z-index: 0;
    }

    @@keyframes floatGlow {
        0% { transform: translate(0, 0); }
        50% { transform: translate(100px, 60px); }
        100% { transform: translate(0, 0); }
    }

    .auth-container {
        position: relative;
        z-index: 1;
        max-width: 400px;
        margin: 40px auto;
        padding: 28px 24px;
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.08);
        backdrop-filter: blur(5px);
    }

    .auth-container h2 {
        text-align: center;
        color: #1b6ec2;
        margin-bottom: 20px;
        font-size: 1.6rem;
        font-weight: 600;
    }

    .form-group {
        margin-bottom: 16px;
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        font-weight: 600;
        font-size: 0.95rem;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        margin-top: 4px;
        border: 1px solid #ccc;
        border-radius: 8px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-group input:focus {
        border-color: #1b6ec2;
        box-shadow: 0 0 0 3px rgba(27, 110, 194, 0.15);
        outline: none;
    }

    .form-group span {
        color: red;
        font-size: 0.85em;
        margin-top: 4px;
    }

    .form-group button[type="button"] {
        position: absolute;
        right: 12px;
        top: 35px;
        background: none;
        border: none;
        font-size: 1.1rem;
        cursor: pointer;
        padding: 0;
    }

    .btn-submit {
        width: 100%;
        background-color: #1b6ec2;
        color: white;
        padding: 11px;
        font-size: 1rem;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
        margin-top: 10px;
    }

    .btn-submit:hover {
        background-color: #155a9d;
        transform: translateY(-1px);
    }

    .auth-footer {
        margin-top: 18px;
        text-align: center;
        font-size: 0.95rem;
    }

    .auth-footer a {
        color: #1b6ec2;
        text-decoration: none;
        font-weight: bold;
    }

    .auth-footer a:hover {
        text-decoration: underline;
    }

    .error-message {
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        padding: 12px 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        font-weight: 500;
    }

    footer {
        display: none !important;
    }
</style>

<div class="auth-container">
    <h2>Register</h2>

    @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0)
    {
        <div class="error-message">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }

    <form method="post">
        <div class="form-group">
            <label>Full Name:</label>
            <input asp-for="Input.FullName" required />
            <span asp-validation-for="Input.FullName"></span>
        </div>

        <div class="form-group">
            <label>Email:</label>
            <input asp-for="Input.Email" required />
            <span asp-validation-for="Input.Email"></span>
        </div>

        <div class="form-group" style="position: relative;">
            <label>Password:</label>
            <input asp-for="Input.Password" type="password" id="passwordInput" required />
            <button type="button" id="togglePassword" style="position: absolute; top: 40px; right: 12px; background: none; border: none; cursor: pointer; padding: 0; font-size: 1.1rem;">
                👁️
            </button>
            <span asp-validation-for="Input.Password"></span>
        </div>

        <div class="form-group" style="position: relative;">
            <label>Confirm Password:</label>
            <input asp-for="Input.ConfirmPassword" type="password" id="confirmPasswordInput" required />
            <button type="button" id="toggleConfirmPassword" style="position: absolute; top: 40px; right: 12px; background: none; border: none; cursor: pointer; padding: 0; font-size: 1.1rem;">
                👁️
            </button>
            <span asp-validation-for="Input.ConfirmPassword"></span>
        </div>

        <button type="submit" class="btn-submit">Register</button>

        <div class="auth-footer">
            <p>Already have an account? <a asp-page="/Account/Login">Login</a></p>
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        function setupToggle(inputId, buttonId) {
            const input = document.getElementById(inputId);
            const button = document.getElementById(buttonId);
            if (!input || !button) return;

            button.addEventListener("click", function () {
                const isPassword = input.type === "password";
                input.type = isPassword ? "text" : "password";
                button.textContent = isPassword ? "🙈" : "👁️";
            });
        }

        setupToggle("passwordInput", "togglePassword");
        setupToggle("confirmPasswordInput", "toggleConfirmPassword");
    });
</script>=== ./Pages/Account/Login.cshtml.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

public class LoginModel : PageModel
{
    private readonly SignInManager<ApplicationUser> _signInManager;

    public LoginModel(SignInManager<ApplicationUser> signInManager)
    {
        _signInManager = signInManager;
    }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public string ErrorMessage { get; set; }

    public class InputModel
    {
        [Required]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid)
            return Page();

        var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
            return RedirectToPage("/Index");

        ErrorMessage = "Invalid email or password. Please try again.";
        return Page();
    }
}=== ./Pages/Account/Profile.cshtml ===
@page
@model ProfileModel
@{
    ViewData["Title"] = "My Profile";
    Layout = "_Layout";
}
<div class="d-flex justify-content-between align-items-center">
    <h2>My Profile</h2>
    @if (User.IsInRole("Doctor"))
    {
        <a class="btn btn-warning" href="/Feedbacks">
            Feedbacks
        </a>
    }
    @if (User.IsInRole("Admin"))
    {
        <div class="d-flex justify-content-end">
            <a class="btn btn-primary me-2" href="/Feedbacks">
                Feedbacks
            </a>
            <a class="btn btn-primary" href="/Admin/SendReminders">
                📧🔔 Envoyer des rappels
            </a>
        </div>
    }
</div>

<form method="post">
    <input type="hidden" asp-for="Input.Id" />

    <div class="mb-3">
        <label>Full Name</label>
        <input asp-for="Input.FullName" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Email</label>
        <input asp-for="Input.Email" class="form-control" readonly />
    </div>

    <div class="mb-3">
        <label>New Password</label>
        <input asp-for="Input.NewPassword" type="password" class="form-control" />
    </div>

    <div class="form-check mb-3">
        <input asp-for="Input.ReceiveEmailNotifications" class="form-check-input" />
        <label class="form-check-label" for="Input.ReceiveEmailNotifications">
            I want to receive email notifications
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
</form>

<hr />

@if (User.IsInRole("Patient"))
{
    <h4>📋 Medical Summary</h4>
    <ul>
        @foreach (var record in Model.MedicalHistory)
        {
            <li>@record</li>
        }
    </ul>

    <h4>💊 Prescriptions</h4>
    <ul>
        @foreach (var prescription in Model.Prescriptions)
        {
            <li>
                <strong>Médicament:</strong> @prescription.Medication<br />
                <strong>Dosage:</strong> @prescription.Dosage<br />
                <strong>Instructions:</strong> @prescription.Instructions<br />
                <strong>Date d'émission:</strong> @prescription.IssueDate.ToShortDateString()<br />
                <strong>Date d'expiration:</strong> @(prescription.ExpirationDate?.ToShortDateString() ?? "-")<br />
                <strong>Statut:</strong> @prescription.Status
            </li>
        }
    </ul>
}

<hr />

<form method="post" asp-page-handler="Delete">
    <button type="submit" class="btn btn-danger"
            onclick="return confirm('Are you sure you want to delete your account and request data removal?');">
        Delete My Account & Data
    </button>
</form>=== ./Pages/Account/Profile.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using HospitalAppointmentSystem.Models;

[Authorize]
public class ProfileModel : PageModel
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly AppDbContext _context;

    public ProfileModel(UserManager<ApplicationUser> userManager,
                        SignInManager<ApplicationUser> signInManager,
                        AppDbContext context)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _context = context;
    }

    public List<string> MedicalHistory { get; set; } = new();
    public List<Prescription> Prescriptions { get; set; } = new();

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        public string Id { get; set; } = "";
        [Required]
        public string FullName { get; set; } = "";
        [EmailAddress]
        public string Email { get; set; } = "";
        public string NewPassword { get; set; } = "";
        public bool ReceiveEmailNotifications { get; set; }
    }

    public async Task<IActionResult> OnGetAsync()
    {
        var user = await _userManager.GetUserAsync(User);
        if (user == null) return NotFound();

        Input = new InputModel
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            ReceiveEmailNotifications = user.ReceiveEmailNotifications
        };

        if (User.IsInRole("Patient"))
        {
            MedicalHistory = await GetMedicalSummary(user.Id);
            Prescriptions = await _context.Prescriptions
                .Where(p => p.PatientId == user.Id)
                .OrderByDescending(p => p.IssueDate)
                .ToListAsync();
        }

        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        var user = await _userManager.FindByIdAsync(Input.Id);
        if (user == null) return NotFound();

        user.FullName = Input.FullName;
        user.ReceiveEmailNotifications = Input.ReceiveEmailNotifications;

        if (!string.IsNullOrWhiteSpace(Input.NewPassword))
        {
            var token = await _userManager.GeneratePasswordResetTokenAsync(user);
            var result = await _userManager.ResetPasswordAsync(user, token, Input.NewPassword);
            if (!result.Succeeded)
            {
                foreach (var err in result.Errors)
                    ModelState.AddModelError(string.Empty, err.Description);
                return Page();
            }
        }

        await _userManager.UpdateAsync(user);
        await _signInManager.RefreshSignInAsync(user);
        return RedirectToPage("/Index");
    }

    public async Task<IActionResult> OnPostDeleteAsync()
    {
        var user = await _userManager.GetUserAsync(User);
        if (user == null) return NotFound();

        await _userManager.DeleteAsync(user);
        await _signInManager.SignOutAsync();
        return RedirectToPage("/Index");
    }

    private async Task<List<string>> GetMedicalSummary(string userId)
    {
        return await _context.MedicalRecords
            .Where(r => r.PatientId == userId)
            .OrderByDescending(r => r.Date)
            .Select(r => $"{r.Date:dd MMM yyyy} – {r.Title}: {r.Description}")
            .ToListAsync();
    }
}=== ./Pages/Account/Logout.cshtml ===
@page
@model LogoutModel
@{
    ViewData["Title"] = "Logout";
}

<h2>Are you sure you want to log out?</h2>

<form method="post">
    <button type="submit">Yes, Log Out</button>
</form>

<p><a asp-page="/Index">Cancel</a></p>
=== ./Pages/Account/Register.cshtml.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

public class RegisterModel : PageModel
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly RoleManager<IdentityRole> _roleManager; // ✅

    public RegisterModel(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, RoleManager<IdentityRole> roleManager)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _roleManager = roleManager; // ✅
    }

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required]
        public string FullName { get; set; }

        [Required]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
        
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm Password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (!ModelState.IsValid) return Page();

        var user = new ApplicationUser
        {
            UserName = Input.Email,
            Email = Input.Email,
            FullName = Input.FullName,
            Role = "Patient"
        };

        var result = await _userManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            // ✅ Ajouter automatiquement le rôle Patient
            if (!await _roleManager.RoleExistsAsync("Patient"))
                await _roleManager.CreateAsync(new IdentityRole("Patient"));

            await _userManager.AddToRoleAsync(user, "Patient");

            await _signInManager.SignInAsync(user, isPersistent: false);
            return RedirectToPage("/Index");
        }

        foreach (var error in result.Errors)
            ModelState.AddModelError(string.Empty, error.Description);

        return Page();
    }
}
=== ./Pages/Account/Login.cshtml ===
@page
@model LoginModel
@{
    ViewData["Title"] = "Login";
}

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(120deg, #e6f0fa, #ffffff);
        height: 100vh;
        overflow: hidden;
        position: relative;
    }

    /* Effet de lumière flottante */
    body::before {
        content: '';
        position: absolute;
        width: 700px;
        height: 700px;
        background: radial-gradient(circle, rgba(27,110,194,0.2) 0%, transparent 70%);
        top: -200px;
        left: -200px;
        animation: floatGlow 12s ease-in-out infinite;
        z-index: 0;
    }

    @@keyframes floatGlow {
        0% { transform: translate(0, 0); }
        50% { transform: translate(100px, 60px); }
        100% { transform: translate(0, 0); }
    }

    .login-container {
        position: relative;
        z-index: 1;
        max-width: 400px;
        margin: 40px auto;
        padding: 28px 24px;
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(5px);
    }

    .login-container h2 {
        text-align: center;
        margin-bottom: 20px;
        color: #1b6ec2;
        font-size: 1.6rem;
        font-weight: 600;
    }

    .form-group {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        font-weight: bold;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        margin-top: 6px;
        border: 1px solid #ccc;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .form-group input:focus {
        border-color: #1b6ec2;
        box-shadow: 0 0 0 3px rgba(27, 110, 194, 0.2);
        outline: none;
    }

    .form-group span {
        color: red;
        font-size: 0.9em;
    }

    .btn-submit {
        width: 100%;
        background-color: #1b6ec2;
        color: white;
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
        margin-top: 10px;
    }

    .btn-submit:hover {
        background-color: #155a9d;
        transform: translateY(-1px);
    }

    .register-link {
        margin-top: 20px;
        text-align: center;
        font-size: 0.95rem;
    }

    .register-link a {
        color: #1b6ec2;
        text-decoration: none;
        font-weight: bold;
    }

    .register-link a:hover {
        text-decoration: underline;
    }

    .error-message {
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        padding: 12px 15px;
        border-radius: 8px;
        margin-bottom: 25px;
        text-align: center;
        font-weight: 500;
    }

    footer {
        display: none !important;
    }

    img[alt="MedLife Logo"] {
        animation: fadeInDown 0.9s ease;
        opacity: 0.95;
        transition: transform 0.3s ease, opacity 0.3s ease;
        display: block;
        margin: 0 auto;
        max-height: 70px;
    }

    img[alt="MedLife Logo"]:hover {
        transform: scale(1.2);
        opacity: 1;
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

</style>

<div style="text-align: center; margin-top: 20px; z-index: 2; position: relative;">
    <img src="~/images/logo.png" alt="MedLife Logo" style="height: 70px;" />
</div>

<div class="login-container">
    <h2>Login</h2>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="error-message">@Model.ErrorMessage</div>
    }

    <form method="post">
        <div class="form-group">
            <label>Email:</label>
            <input asp-for="Input.Email" />
            <span asp-validation-for="Input.Email"></span>
        </div>

        <div class="form-group" style="position: relative;">
            <label>Password:</label>
            <input asp-for="Input.Password" type="password" id="passwordInput" />
            <button type="button" id="togglePassword" style="position: absolute; top: 40px; right: 12px; background: none; border: none; cursor: pointer;">
                👁️
            </button>
            <span asp-validation-for="Input.Password"></span>
        </div>

        <button type="submit" class="btn-submit">Login</button>

        <div class="register-link">
            <p>Don't have an account? <a asp-page="/Account/Register">Register</a></p>
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const passwordInput = document.getElementById("passwordInput");
        const toggleButton = document.getElementById("togglePassword");

        toggleButton.addEventListener("click", function () {
            const isPassword = passwordInput.type === "password";
            passwordInput.type = isPassword ? "text" : "password";
            toggleButton.textContent = isPassword ? "🙈" : "👁️";
        });
    });
</script>
=== ./Pages/Account/AccessDenied.cshtml.cs ===
using Microsoft.AspNetCore.Mvc.RazorPages;

public class AccessDeniedModel : PageModel
{
    public void OnGet()
    {
    }
}=== ./Pages/Account/AccessDenied.cshtml ===
@page
@model AccessDeniedModel
@{
    Layout = null;
}=== ./Pages/Account/Logout.cshtml.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Threading.Tasks;

public class LogoutModel : PageModel
{
    private readonly SignInManager<ApplicationUser> _signInManager;

    public LogoutModel(SignInManager<ApplicationUser> signInManager)
    {
        _signInManager = signInManager;
    }

    public async Task<IActionResult> OnPostAsync()
    {
        await _signInManager.SignOutAsync();
        return RedirectToPage("/Index");
    }
}=== ./Pages/Index.cshtml ===
﻿@page
@model IndexModel
@{
    ViewData["Title"] = "Home Page";
}

<!-- Styles personnalisés -->
<style>
    .hero-section {
        background: url('images/hospital-bg1.png') no-repeat center center;
        background-size: cover;
        height: 500px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .hero-section h1 {
        font-size: 3rem;
        color: #fff;
        font-weight: 700;
        text-shadow: 0 0 20px rgba(0, 0, 0, 0.9);
    }

    .hero-section p {
        color: #fff;
        font-size: 1.2rem;
        margin-top: 1rem;
        text-shadow: 0 0 20px rgba(0, 0, 0, 0.9);
    }

    .hero-section .btn-primary {
        margin-top: 2rem;
        font-size: 1.2rem;
        padding: 12px 24px;
    }

    .services-section {
        position: relative;
        padding: 80px 0;
        background-color: #f8f9fa;
        overflow: hidden;
    }

    .services-section h2 {
        text-align: center;
        margin-bottom: 60px;
        font-weight: bold;
        color: #1b6ec2;
    }

    .services-cards {
        display: flex;
        justify-content: center;
        gap: 40px;
        position: relative;
        z-index: 1;
    }

    .card-service {
        background: #ffffff;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
        text-align: center;
        transition: all 0.3s ease;
        width: 280px;
    }

    .card-service:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
        border: 1px solid #1b6ec2;
    }

    .card-service h5 {
        font-size: 1.2rem;
        color: #1b6ec2;
        margin-bottom: 10px;
    }

    .card-service p {
        font-size: 0.95rem;
        color: #333;
    }

    canvas#particleCanvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 0;
    }
</style>

<!-- HERO SECTION -->
<div class="hero-section">
    <div>
        <h1>Welcome to MedLife Hospital</h1>
        <p>Book appointments with trusted doctors anytime, anywhere.</p>
        @if (User.Identity.IsAuthenticated)
        {
            <a href="/Appointments/ManageAppointments" class="btn btn-primary" style="transition: transform 0.3s;"
               onmouseover="this.style.transform='scale(1.1)'" onmouseout="this.style.transform='scale(1)'">Get Started</a>
        }
        else
        {
            <a href="/Account/Login" class="btn btn-primary" style="transition: transform 0.3s;"
               onmouseover="this.style.transform='scale(1.1)'" onmouseout="this.style.transform='scale(1)'">Get Started</a>
        }
        </div>
</div>

<!-- SERVICES SECTION AVEC PARTICULES -->
<div class="services-section">
    <canvas id="particleCanvas"></canvas>
    <div class="container">
        <h2>Our Services</h2>
        <div class="services-cards">
            <div class="card-service">
                <h5>🩺 Book Appointments</h5>
                <p>Schedule consultations with expert doctors easily online.</p>
            </div>
            <div class="card-service">
                <h5>💊 Specialties</h5>
                <p>Cardiology, Pediatrics, Dermatology, and more available.</p>
            </div>
            <div class="card-service">
                <h5>📋 Appointment History</h5>
                <p>Review and manage all your past and upcoming visits.</p>
            </div>
        </div>
    </div>
</div>

<!-- TESTIMONIALS -->
<div class="bg-white py-5">
    <div class="container text-center">
        <h3 class="mb-4">What Our Patients Say</h3>
        <div class="row justify-content-center">
            <div class="col-md-3"><em>“The doctors at MedLife are amazing! They saved my life.”</em><br /><strong>– Sarah M.</strong></div>
            <div class="col-md-3"><em>“Everything was smooth and professional.”</em><br /><strong>– John D.</strong></div>
            <div class="col-md-3"><em>“Highly recommend this hospital. Very caring staff.”</em><br /><strong>– Emma R.</strong></div>
        </div>
    </div>
</div>

<!-- CONTACT -->
<div class="bg-light py-5 text-center">
    <h3>Contact Us</h3>
    <p>📍 123 Health Street, Paris, France</p>
    <p>📞 +33 1 23 45 67 89</p>
    <p>📧 contact@medlife.com</p>
</div>
<!-- Spacer -->
<div style="height: 50px;"></div>

<!-- PARTICLES SCRIPT -->
@section Scripts {
    <script>
        const canvas = document.getElementById("particleCanvas");
        const ctx = canvas.getContext("2d");
        let particles = [];

        function resizeCanvas() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
        }

        window.addEventListener("resize", resizeCanvas);
        resizeCanvas();

        for (let i = 0; i < 50; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                size: 6 + Math.random() * 6,
                dx: (Math.random() - 0.5) * 0.5,
                dy: (Math.random() - 0.5) * 0.5,
                angle: Math.random() * Math.PI * 2,
                rotationSpeed: (Math.random() - 0.5) * 0.01
            });
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            particles.forEach(p => {
                p.x += p.dx;
                p.y += p.dy;
                p.angle += p.rotationSpeed;

                if (p.x < 0 || p.x > canvas.width) p.dx *= -1;
                if (p.y < 0 || p.y > canvas.height) p.dy *= -1;

                ctx.save();
                ctx.translate(p.x, p.y);
                ctx.rotate(p.angle);
                ctx.strokeStyle = "#1b6ec2";
                ctx.lineWidth = 1.5;

                ctx.beginPath();
                ctx.moveTo(-p.size / 2, 0);
                ctx.lineTo(p.size / 2, 0);
                ctx.moveTo(0, -p.size / 2);
                ctx.lineTo(0, p.size / 2);
                ctx.stroke();
                ctx.restore();
            });

            requestAnimationFrame(draw);
        }

        draw();
    </script>
}=== ./Pages/_ViewStart.cshtml ===
﻿@{
    Layout = "_Layout";
}=== ./Pages/Index.cshtml.cs ===
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace HospitalAppointmentSystem.Pages;

public class IndexModel : PageModel
{
    private readonly ILogger<IndexModel> _logger;

    public IndexModel(ILogger<IndexModel> logger)
    {
        _logger = logger;
    }

    public void OnGet()
    {

    }
}
=== ./Pages/Prescriptions/Prescriptions.cshtml ===
@page
@model PrescriptionsModel
@{
    ViewData["Title"] = "Prescriptions";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Prescriptions</h2>
    @if (User.IsInRole("Doctor") || User.IsInRole("Admin"))
    {
        <a asp-page="/Prescriptions/ExportPrescriptions" class="btn btn-primary">Export Prescriptions</a>
    }
</div>

@if (User.IsInRole("Doctor"))
{
    <form method="post" class="border p-3 rounded mb-4 bg-light">
        <div class="row mb-2">
            <div class="col">
                <label>Patient</label>
                <select class="form-control" asp-for="Input.PatientId">
                    <option value="">-- Select --</option>
                    @foreach (var p in Model.Patients)
                    {
                        <option value="@p.Id">@p.FullName (@p.Email)</option>
                    }
                </select>
            </div>
            <div class="col">
                <label>Medication</label>
                <input asp-for="Input.Medication" class="form-control" required />
            </div>
            <div class="col">
                <label>Dosage</label>
                <input asp-for="Input.Dosage" class="form-control" required />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <label>Instructions</label>
                <textarea asp-for="Input.Instructions" class="form-control"></textarea>
            </div>
            <div class="col">
                <label>Issue Date</label>
                <input asp-for="Input.IssueDate" type="date" class="form-control" required />
            </div>
            <div class="col">
                <label>Expiration Date</label>
                <input asp-for="Input.ExpirationDate" type="date" class="form-control" />
            </div>
        </div>
        <button class="btn btn-success">Add Prescription</button>
    </form>
}

<input type="text" id="searchInput" class="form-control mb-3" placeholder="Search prescriptions..." />

<table class="table table-bordered table-hover">
    <thead class="table-light">
    <tr>
        <th>Medication</th>
        <th>Dosage</th>
        <th>Instructions</th>
        <th>Issued</th>
        <th>Expires</th>
        <th>Doctor</th>
        <th>Patient</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="prescriptionsTable">
    @foreach (var p in Model.Prescriptions)
    {
        <tr>
            <td>@p.Medication</td>
            <td>@p.Dosage</td>
            <td>@p.Instructions</td>
            <td>@p.IssueDate.ToShortDateString()</td>
            <td>@(p.ExpirationDate?.ToShortDateString() ?? "-")</td>
            <td>@p.Doctor?.FullName</td>
            <td>@p.Patient?.FullName</td>
            <td>
                <form method="post" asp-page-handler="Delete" asp-route-id="@p.Id" onsubmit="return confirm('Are you sure you want to delete this prescription?');">
                    <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                </form>
                @if (User.IsInRole("Doctor"))
                {
                    <form method="post" asp-page-handler="SendToPharmacy" asp-route-id="@p.Id">
                        <button type="submit" class="btn btn-primary btn-sm mt-1">Send to Pharmacy</button>
                    </form>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
    <script>
        document.getElementById('searchInput').addEventListener('keyup', function() {
            var searchValue = this.value.toLowerCase();
            var rows = document.querySelectorAll('#prescriptionsTable tr');
            rows.forEach(function(row) {
                var cells = row.querySelectorAll('td');
                var match = false;
                cells.forEach(function(cell) {
                    if (cell.textContent.toLowerCase().includes(searchValue)) {
                        match = true;
                    }
                });
                row.style.display = match ? '' : 'none';
            });
        });
    </script>
}=== ./Pages/Prescriptions/ExportPrescriptions.cshtml ===
@page
@model ExportPrescriptionsModel
@{
    ViewData["Title"] = "Export Prescriptions";
}

<h2>\📤 Export Prescriptions</h2>

<form method="get">
    <div class="row mb-3">
        <div class="col-md-4">
            <label>Filter by Patient</label>
            <select asp-for="PatientId" class="form-select">
                <option value="">All Patients</option>
                @foreach (var patient in Model.Patients)
                {
                    <option value="@patient.Id">@patient.FullName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label>Start Date</label>
            <input asp-for="StartDate" type="date" class="form-control" />
        </div>
        <div class="col-md-3">
            <label>End Date</label>
            <input asp-for="EndDate" type="date" class="form-control" />
        </div>
        <div class="col-md-2 align-self-end">
            <button class="btn btn-outline-primary w-100">Apply Filters</button>
        </div>
    </div>
</form>

<div class="btn-group mt-2">
    <a asp-page-handler="DownloadCsv"
       asp-route-patientId="@Model.PatientId"
       asp-route-startDate="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")"
       asp-route-endDate="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")"
       class="btn btn-outline-success">Download CSV</a>

    <a asp-page-handler="DownloadPdf"
       asp-route-patientId="@Model.PatientId"
       asp-route-startDate="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")"
       asp-route-endDate="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")"
       class="btn btn-outline-danger">Download PDF</a>
</div>

@if (Model.FilteredPrescriptions.Any())
{
    <table class="table table-bordered table-hover mt-4">
        <thead class="table-light">
            <tr>
                <th>Patient</th>
                <th>Doctor</th>
                <th>Medication</th>
                <th>Dosage</th>
                <th>Instructions</th>
                <th>Issue Date</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in Model.FilteredPrescriptions)
            {
                <tr>
                    <td>@p.Patient.FullName</td>
                    <td>@p.Doctor.FullName</td>
                    <td>@p.Medication</td>
                    <td>@p.Dosage</td>
                    <td>@p.Instructions</td>
                    <td>@p.IssueDate.ToString("yyyy-MM-dd")</td>
                    <td>@p.Status</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No prescriptions found with these filters.</p>
}=== ./Pages/Prescriptions/ExportPrescriptions.cshtml.cs ===
// File: Pages/Prescriptions/ExportPrescriptions.cshtml.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.Text;
using System.IO;
using HospitalAppointmentSystem.Models;
using iText.Bouncycastleconnector;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;

[Authorize(Roles = "Doctor,Admin")]
public class ExportPrescriptionsModel : PageModel
{
    private readonly AppDbContext _context;

    public ExportPrescriptionsModel(AppDbContext context)
    {
        _context = context;
    }

    public List<ApplicationUser> Patients { get; set; } = new();

    // Propriété pour afficher dynamiquement les prescriptions filtrées
    public List<Prescription> FilteredPrescriptions { get; set; } = new();

    [BindProperty(SupportsGet = true)]
    public string? PatientId { get; set; }

    [BindProperty(SupportsGet = true)]
    public DateTime? StartDate { get; set; }

    [BindProperty(SupportsGet = true)]
    public DateTime? EndDate { get; set; }

    public async Task OnGetAsync()
    {
        Patients = await _context.Users
            .Where(u => u.Role == "Patient")
            .OrderBy(u => u.FullName)
            .ToListAsync();

        FilteredPrescriptions = await GetFilteredPrescriptionsAsync();
    }

    private async Task<List<Prescription>> GetFilteredPrescriptionsAsync()
    {
        var query = _context.Prescriptions
            .Include(p => p.Patient)
            .Include(p => p.Doctor)
            .AsQueryable();

        if (!string.IsNullOrEmpty(PatientId))
            query = query.Where(p => p.PatientId == PatientId);

        if (StartDate.HasValue)
            query = query.Where(p => p.IssueDate >= StartDate.Value);

        if (EndDate.HasValue)
            query = query.Where(p => p.IssueDate <= EndDate.Value);

        return await query.OrderByDescending(p => p.IssueDate).ToListAsync();
    }

    public async Task<IActionResult> OnGetDownloadCsvAsync()
    {
        var prescriptions = await GetFilteredPrescriptionsAsync();

        var sb = new StringBuilder();
        sb.AppendLine("Patient,Doctor,Medication,Dosage,Instructions,IssueDate,Status");

        foreach (var p in prescriptions)
        {
            sb.AppendLine($"\"{p.Patient.FullName}\",\"{p.Doctor.FullName}\",\"{p.Medication}\",\"{p.Dosage}\",\"{p.Instructions}\",\"{p.IssueDate:yyyy-MM-dd}\",\"{p.Status}\"");
        }

        return File(Encoding.UTF8.GetBytes(sb.ToString()), "text/csv", "prescriptions.csv");
    }

    public async Task<IActionResult> OnGetDownloadPdfAsync()
    {
        var prescriptions = await GetFilteredPrescriptionsAsync();

        using var stream = new MemoryStream();
        var writer = new PdfWriter(stream, new WriterProperties().SetCompressionLevel(CompressionConstants.BEST_COMPRESSION));
        var pdf = new PdfDocument(writer);
        var doc = new Document(pdf);

        doc.Add(new Paragraph("Prescription Export").SetFontSize(16));
        doc.Add(new Paragraph($"Exported at: {DateTime.Now:yyyy-MM-dd HH:mm}").SetFontSize(10));

        foreach (var p in prescriptions)
        {
            doc.Add(new Paragraph($"Patient: {p.Patient.FullName}"));
            doc.Add(new Paragraph($"Doctor: {p.Doctor.FullName}"));
            doc.Add(new Paragraph($"Medication: {p.Medication}"));
            doc.Add(new Paragraph($"Dosage: {p.Dosage}"));
            doc.Add(new Paragraph($"Instructions: {p.Instructions}"));
            doc.Add(new Paragraph($"Date: {p.IssueDate:yyyy-MM-dd} – Status: {p.Status}"));
            doc.Add(new Paragraph("--------------------------"));
        }

        doc.Close();
        return File(stream.ToArray(), "application/pdf", "prescriptions.pdf");
    }
}=== ./Pages/Prescriptions/Prescriptions.cshtml.cs ===
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using HospitalAppointmentSystem.Models;

[Authorize]
public class PrescriptionsModel : PageModel
{
    private readonly AppDbContext _context;
    private readonly UserManager<ApplicationUser> _userManager;

    public PrescriptionsModel(AppDbContext context, UserManager<ApplicationUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    public List<Prescription> Prescriptions { get; set; } = new();

    public List<ApplicationUser> Patients { get; set; } = new();

    [BindProperty]
    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required] public string Medication { get; set; } = "";
        [Required] public string Dosage { get; set; } = "";
        public string Instructions { get; set; } = "";
        [Required] public DateTime IssueDate { get; set; } = DateTime.Today;
        public DateTime? ExpirationDate { get; set; }
        public string PatientId { get; set; } = "";
    }

    public async Task<IActionResult> OnGetAsync()
    {
        var currentUser = await _userManager.GetUserAsync(User);
        var isDoctor = await _userManager.IsInRoleAsync(currentUser, "Doctor");
        var isAdmin = await _userManager.IsInRoleAsync(currentUser, "Admin");

        if (isDoctor || isAdmin)
        {
            Patients = await _userManager.Users.Where(u => u.Role == "Patient").ToListAsync();
        }

        if (isAdmin)
        {
            Prescriptions = await _context.Prescriptions
                .Include(p => p.Patient)
                .Include(p => p.Doctor)
                .OrderByDescending(p => p.IssueDate)
                .ToListAsync();
        }
        else if (isDoctor)
        {
            Prescriptions = await _context.Prescriptions
                .Include(p => p.Patient)
                .Where(p => p.DoctorId == currentUser.Id)
                .OrderByDescending(p => p.IssueDate)
                .ToListAsync();
        }
        else
        {
            Prescriptions = await _context.Prescriptions
                .Include(p => p.Doctor)
                .Where(p => p.PatientId == currentUser.Id)
                .OrderByDescending(p => p.IssueDate)
                .ToListAsync();
        }

        return Page();
    }

    public async Task<IActionResult> OnPostAsync()
    {
        var doctor = await _userManager.GetUserAsync(User);
        if (!await _userManager.IsInRoleAsync(doctor, "Doctor"))
            return Forbid();

        if (!ModelState.IsValid)
        {
            await OnGetAsync();
            return Page();
        }

        var prescription = new Prescription
        {
            Medication = Input.Medication,
            Dosage = Input.Dosage,
            Instructions = Input.Instructions,
            IssueDate = Input.IssueDate,
            ExpirationDate = Input.ExpirationDate,
            DoctorId = doctor.Id,
            PatientId = Input.PatientId
        };

        _context.Prescriptions.Add(prescription);
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }

    public async Task<IActionResult> OnPostDeleteAsync(int id)
    {
        var currentUser = await _userManager.GetUserAsync(User);
        var isAdmin = await _userManager.IsInRoleAsync(currentUser, "Admin");

        if (!isAdmin)
        {
            return Forbid();
        }

        var prescription = await _context.Prescriptions.FindAsync(id);
        if (prescription == null)
        {
            return NotFound();
        }

        _context.Prescriptions.Remove(prescription);
        await _context.SaveChangesAsync();

        return RedirectToPage();
    }

    public async Task<IActionResult> OnPostSendToPharmacyAsync(int id)
    {
        var currentUser = await _userManager.GetUserAsync(User);
        var isDoctor = await _userManager.IsInRoleAsync(currentUser, "Doctor");

        if (!isDoctor)
        {
            return Forbid();
        }

        var prescription = await _context.Prescriptions
            .Include(p => p.Patient)
            .Include(p => p.Doctor)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (prescription == null)
        {
            return NotFound();
        }

        // Code for sending email to pharmacy directly
        // await _emailService.SendEmailAsync("pharmacy@example.com", "New Prescription", $"Prescription details: {prescription}");

        return RedirectToPage();
    }
}=== ./Pages/Feedbacks.cshtml ===
@page
@model FeedbacksModel
@{
    ViewData["Title"] = "Feedbacks";
}

<h2>Feedbacks</h2>

@if (!Model.Feedbacks.Any())
{
    <p>No feedbacks available.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
        <tr>
            <th>Date</th>
            <th>Patient</th>
            @if (User.IsInRole("Admin"))
            {
                <th>Doctor</th>
            }
            <th>Rating</th>
            <th>Comment</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var fb in Model.Feedbacks)
        {
            <tr>
                <td>@fb.Date.ToString("dd/MM/yyyy")</td>
                <td>@fb.PatientName</td>
                @if (User.IsInRole("Admin"))
                {
                    <td>@fb.DoctorName</td>
                }
                <td>
                    @for (int i = 1; i <= fb.Rating; i++)
                    {
                        <span style="color: gold;">★</span>
                    }
                    @for (int i = fb.Rating + 1; i <= 5; i++)
                    {
                        <span style="color: lightgray;">★</span>
                    }
                </td>
                <td>@(string.IsNullOrWhiteSpace(fb.Comment) ? "-" : fb.Comment)</td>
            </tr>
        }
        </tbody>
    </table>
}
=== ./Services/ReminderService.cs ===
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Threading.Tasks;

public class ReminderService
{
    private readonly AppDbContext _context;
    private readonly EmailService _emailService;

    public ReminderService(AppDbContext context, EmailService emailService)
    {
        _context = context;
        _emailService = emailService;
    }

    public async Task SendAppointmentRemindersAsync()
    {
        var now = DateTime.Now;
        var targetTime = now.AddHours(24);

        var appointments = await _context.Appointments
            .Include(a => a.Patient)
            .Include(a => a.Doctor)
            .Where(a =>
                a.Status == "Approved" &&
                a.ReminderSent == false &&
                a.StartTime > now &&
                a.StartTime <= targetTime)
            .ToListAsync();

        foreach (var appointment in appointments)
        {
            var subject = "⏰ Appointment Reminder - 24h Notice";
            var body = $@"
Hello {appointment.Patient.FullName},<br><br>
This is a reminder for your appointment scheduled in 24 hours:<br>
<strong>Date:</strong> {appointment.StartTime:dddd, MMM dd yyyy HH:mm}<br>
<strong>Doctor:</strong> Dr. {appointment.Doctor.FullName}<br><br>
Thank you,<br>
The Hospital Team.";

            try
            {
                await _emailService.SendAsync(appointment.Patient.Email, subject, body);
                appointment.ReminderSent = true;
            }
            catch
            {
                // Optionnel : log l'erreur
            }
        }

        await _context.SaveChangesAsync();
    }
}=== ./Services/EmailService.cs ===
using System.Text;
using MailKit.Net.Smtp;
using MimeKit;
using Microsoft.Extensions.Configuration;

public class EmailService
{
    private readonly IConfiguration _config;

    public EmailService(IConfiguration config)
    {
        _config = config;
    }

    public async Task SendAsync(string toEmail, string subject, string body)
    {
        try
        {
            var email = new MimeMessage();
            email.From.Add(MailboxAddress.Parse(_config["EmailSettings:SenderEmail"]));
            email.To.Add(MailboxAddress.Parse(toEmail));
            email.Subject = subject;
            email.Body = new TextPart(MimeKit.Text.TextFormat.Html) { Text = body };

            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(
                _config["EmailSettings:SmtpServer"],
                int.Parse(_config["EmailSettings:SmtpPort"]),
                MailKit.Security.SecureSocketOptions.StartTls
            );

            await smtp.AuthenticateAsync(
                _config["EmailSettings:SenderEmail"],
                _config["EmailSettings:SenderPassword"]
            );

            await smtp.SendAsync(email);
            await smtp.DisconnectAsync(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Email sending failed: " + ex.Message);
            throw; // Optionnel : relancer l'erreur pour retour dans l'IHM
        }
    }
    
    public async Task SendWithAttachmentAsync(string toEmail, string subject, string htmlBody, string attachmentText, string attachmentName)
    {
        var email = new MimeMessage();
        email.From.Add(MailboxAddress.Parse(_config["EmailSettings:SenderEmail"]));
        email.To.Add(MailboxAddress.Parse(toEmail));
        email.Subject = subject;

        var builder = new BodyBuilder
        {
            HtmlBody = htmlBody
        };
        builder.Attachments.Add(attachmentName, Encoding.UTF8.GetBytes(attachmentText), new ContentType("text", "calendar"));

        email.Body = builder.ToMessageBody();

        using var smtp = new MailKit.Net.Smtp.SmtpClient();
        await smtp.ConnectAsync(_config["EmailSettings:SmtpServer"], int.Parse(_config["EmailSettings:SmtpPort"]), MailKit.Security.SecureSocketOptions.StartTls);
        await smtp.AuthenticateAsync(_config["EmailSettings:SenderEmail"], _config["EmailSettings:SenderPassword"]);
        await smtp.SendAsync(email);
        await smtp.DisconnectAsync(true);
    }

}=== ./Services/AppointmentService.cs ===
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class AppointmentService
{
    private readonly AppDbContext _context;
    private readonly EmailService _emailService;

    public AppointmentService(AppDbContext context, EmailService emailService)
    {
        _context = context;
        _emailService = emailService;
    }

    public async Task<List<TimeSlotDto>> GetAvailableTimeSlots(string doctorId, DateTime date)
    {
        var startOfDay = date.Date.AddHours(9);  // Horaires : 9h - 17h
        var endOfDay = date.Date.AddHours(17);
        var allSlots = new List<TimeSlotDto>();

        for (var time = startOfDay; time < endOfDay; time = time.AddMinutes(30))
        {
            allSlots.Add(new TimeSlotDto
            {
                StartTime = time,
                EndTime = time.AddMinutes(30),
                Status = "Available"
            });
        }

        var doctorDaysOff = await _context.DoctorDaysOff
            .Where(d => d.DoctorId == doctorId && d.Start.Date <= date.Date && d.End.Date >= date.Date)
            .ToListAsync();

        var existingAppointments = await _context.Appointments
            .Where(a => a.DoctorId == doctorId && a.StartTime.Date == date.Date)
            .Select(a => new { a.StartTime, a.Status })
            .ToListAsync();

        foreach (var slot in allSlots)
        {
            bool isOff = doctorDaysOff.Any(off => slot.StartTime < off.End && slot.EndTime > off.Start);
            if (isOff)
            {
                slot.Status = "Unavailable";
                continue;
            }

            var existing = existingAppointments.FirstOrDefault(a => a.StartTime == slot.StartTime);
            if (existing != null)
            {
                slot.Status = existing.Status == "Approved" ? "Booked" : "Pending";
            }
        }

        return allSlots;
    }

    public async Task<bool> BookAppointment(Appointment appointment)
    {
        var isDoctorOff = await IsDoctorOff(appointment.DoctorId, appointment.StartTime, appointment.EndTime);
        if (isDoctorOff)
        {
            return false;
        }

        var isSlotTaken = await _context.Appointments
            .AnyAsync(a => a.DoctorId == appointment.DoctorId &&
                           a.StartTime < appointment.EndTime &&
                           a.EndTime > appointment.StartTime &&
                           a.Status == "Approved");

        if (isSlotTaken)
        {
            return false;
        }

        _context.Appointments.Add(appointment);
        await _context.SaveChangesAsync();

        /*
        // ✅ Email de confirmation
        var patient = await _context.Users.FindAsync(appointment.PatientId);
        var doctor = await _context.Users.FindAsync(appointment.DoctorId);

        if (patient != null && patient.ReceiveEmailNotifications)
        {
            await _emailService.SendAsync(patient.Email, "📅 Appointment Confirmed",
                $@"Hello {patient.FullName},<br><br>
                Your appointment with Dr. {doctor?.FullName} on <strong>{appointment.StartTime:dddd dd MMM yyyy HH:mm}</strong> has been successfully booked.<br><br>
                Regards,<br><strong>MedLife Hospital</strong>");
        }

        if (doctor != null && doctor.ReceiveEmailNotifications)
        {
            await _emailService.SendAsync(doctor.Email, "👨‍⚕️ New Appointment Scheduled",
                $@"Dear Dr. {doctor.FullName},<br><br>
                You have a new appointment with <strong>{patient?.FullName}</strong> scheduled on <strong>{appointment.StartTime:dddd dd MMM yyyy HH:mm}</strong>.<br><br>
                Please log in to your dashboard for more details.<br><br>
                Regards,<br><strong>MedLife Hospital</strong>");
        }
        */

        return true;
    }

    public async Task<bool> IsDoctorOff(string doctorId, DateTime start, DateTime end)
    {
        return await _context.DoctorDaysOff
            .AnyAsync(off => off.DoctorId == doctorId &&
                             start < off.End &&
                             end > off.Start);
    }
}

public class TimeSlotDto
{
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Status { get; set; }
}
=== ./Program.cs ===
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddHttpClient(); // for HttpClientFactory for external API calls
// Ollama API
builder.Services.AddSession(); // for session management and chat history

// Email Service
builder.Services.AddSingleton<EmailService>();

// Enregistrer ReminderService dans le conteneur DI
builder.Services.AddTransient<ReminderService>();

// 🟢 Configure SQLite Database
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = "/Account/Login";
    options.AccessDeniedPath = "/Account/AccessDenied";
});

// 🟢 Configure Identity (Users, Roles)
builder.Services.AddDefaultIdentity<ApplicationUser>(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequireDigit = true;
    options.Password.RequiredLength = 6;
    options.Password.RequireNonAlphanumeric = false;
    options.Password.RequireUppercase = false;
})
.AddRoles<IdentityRole>()
.AddEntityFrameworkStores<AppDbContext>();

// 🟢 Add Razor Pages & API Controllers
builder.Services.AddRazorPages();
builder.Services.AddControllers(); // Active le support API
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddScoped<AppointmentService>();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Hospital API", Version = "v1" });
});

var app = builder.Build();

// 🟢 Ensure Roles & Admin User are Created
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    try
    {
        var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();
        var userManager = services.GetRequiredService<UserManager<ApplicationUser>>();
        await CreateRolesAndAdminAsync(roleManager, userManager);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error creating roles: {ex.Message}");
    }
}

// 🟢 Middleware Configuration
app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
app.UseSession();
app.UseAuthorization();

//if (!app.Environment.IsDevelopment())
//{
app.UseExceptionHandler("/Error"); // Handle errors properly display error page instead of JSON
//}

app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Hospital API v1");
});

app.MapRazorPages();
app.MapControllers(); // 🟢 Active les API

app.Run();

/// <summary>
/// Creates roles (Admin, Doctor, Patient) and an initial admin user.
/// </summary>
async Task CreateRolesAndAdminAsync(RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
{
    string[] roleNames = { "Admin", "Doctor", "Patient" };
    foreach (var role in roleNames)
    {
        if (!await roleManager.RoleExistsAsync(role))
        {
            await roleManager.CreateAsync(new IdentityRole(role));
        }
    }

    // 🟢 Create an Admin User if not exists
    string adminEmail = "admin@hospital.com";
    string adminPassword = "Admin@123";
    var adminUser = await userManager.FindByEmailAsync(adminEmail);
    if (adminUser == null)
    {
        adminUser = new ApplicationUser
        {
            UserName = adminEmail,
            Email = adminEmail,
            FullName = "Hospital Admin",
            Role = "Admin"
        };

        var result = await userManager.CreateAsync(adminUser, adminPassword);
        if (result.Succeeded)
        {
            await userManager.AddToRoleAsync(adminUser, "Admin");
        }
    }
}