@page
@model BookAppointmentModel
@{
    ViewData["Title"] = "Book an Appointment";
}

<style>
    .btn-off {
        background-color: #343a40 !important; /* Bootstrap "dark" */
        color: white !important;
        border: 1px solid #212529;
        opacity: 1 !important; /* ne pas griser le bouton m√™me s‚Äôil est disabled */
        cursor: not-allowed;
    }
</style>

<div class="d-flex justify-content-between align-items-center">
    <h2>Book an Appointment</h2>
    @if (User.IsInRole("Patient"))
    {
        <a class="btn btn-outline-primary" href="/Appointments/ManageAppointments">Manage Appointments</a>
    }
</div>

<form method="post">
    <div class="mb-3">
        <label>Select Doctor</label>
        <select asp-for="Input.DoctorId" class="form-control" id="doctorDropdown">
            <option value="">-- Select a Doctor --</option>
            @foreach (var doctor in Model.Doctors)
            {
                <option value="@doctor.Id">@doctor.FullName (@doctor.Specialization)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Select Date</label>
        <input asp-for="Input.Date" type="date" class="form-control" id="dateInput" required />
    </div>

    <div class="mb-3">
        <strong>Legend:</strong>
        <span class="badge bg-success">Available</span>
        <span class="badge bg-secondary">Pending</span>
        <span class="badge bg-danger">Booked</span>
        <span class="badge bg-light text-dark border">Lunch Break</span>
        <span class="badge bg-dark">Doctor Off</span>
    </div>
    <div id="timeSlotButtons">
        <!-- Time slots will be displayed here -->
    </div>

    <input type="hidden" asp-for="Input.TimeSlot" id="selectedTimeSlot" />

    <button type="submit" class="btn btn-primary" id="bookButton" disabled>Select time to Book Appointment</button>
</form>

@if (!string.IsNullOrEmpty(Model.Message))
{
    <br/>
    <div class="alert alert-success">@Model.Message</div>
}

<a class="btn btn-outline-secondary mt-3" asp-page="/Appointments/AppointmentPolicies" target="_blank">üìÑ View Appointment Policies</a>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dateInput = document.getElementById("dateInput");
        // D√©finir la date par d√©faut si aucune valeur n'est pr√©sente
        if (!dateInput.value) {
            const today = new Date().toISOString().split('T')[0];
            dateInput.value = today;
        }
        // Toujours d√©finir la date minimale au jour actuel
        dateInput.setAttribute("min", new Date().toISOString().split('T')[0]);

        // Si le docteur est d√©j√† s√©lectionn√© et que la date est pr√©sente, charger les cr√©neaux
        const doctorDropdown = document.getElementById("doctorDropdown");
        if (doctorDropdown && doctorDropdown.value && dateInput.value) {
            loadSlots();
        }
    });

    // √âv√©nements existants pour charger les cr√©neaux lors du changement
    document.getElementById("doctorDropdown").addEventListener("change", loadSlots);
    document.getElementById("dateInput").addEventListener("change", loadSlots);

    function loadSlots() {
        const doctorId = document.getElementById("doctorDropdown").value;
        const date = document.getElementById("dateInput").value;
        const slotContainer = document.getElementById("timeSlotButtons");
        slotContainer.innerHTML = "<p>Loading available slots...</p>";

        if (doctorId && date) {
            const selectedDate = new Date(date);
            const today = new Date();
            const formattedDate = selectedDate.toISOString().split('T')[0];

            fetch(`/api/appointments/available?doctorId=${doctorId}&date=${formattedDate}`)
                .then(response => response.json())
                .then(slots => {
                    slotContainer.innerHTML = "";
                    if (slots.length === 0) {
                        slotContainer.innerHTML = "<p>No available slots for this day.</p>";
                        return;
                    }

                    slots.forEach(slot => {
                        const slotDate = new Date(slot.startTime);
                        const hour = slotDate.getHours();
                        const minutes = slotDate.getMinutes();

                        const isToday = selectedDate.toDateString() === today.toDateString();
                        const isLunch = hour === 12 && (minutes === 0 || minutes === 30);

                        const button = document.createElement("button");
                        button.classList.add("btn", "m-1");
                        button.innerText = slotDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                        if (slot.status === "Unavailable") {
                            button.classList.add("btn-off");
                            button.disabled = true;
                            button.title = "Unavailable - Doctor is off";
                        } else if (isLunch) {
                            button.classList.add("btn-light", "border");
                            button.disabled = true;
                            button.title = "Lunch Break";
                        } else if (isToday && slotDate <= new Date()) {
                            button.classList.add("btn-light", "border");
                            button.disabled = true;
                            button.title = "Past time";
                        } else if (slot.status === "Available") {
                            button.classList.add("btn-success");
                            button.onclick = function () {
                                document.getElementById("selectedTimeSlot").value = slot.startTime;
                                document.getElementById("bookButton").disabled = false;
                            };
                        } else if (slot.status === "Pending") {
                            button.classList.add("btn-secondary");
                            button.disabled = true;
                            button.title = "Pending Approval";
                        } else if (slot.status === "Booked") {
                            button.classList.add("btn-danger");
                            button.disabled = true;
                            button.title = "Already Booked";
                        }

                        slotContainer.appendChild(button);
                    });
                })
                .catch(error => {
                    slotContainer.innerHTML = "<p>Error loading slots. Please try again.</p>";
                    console.error("Error fetching time slots:", error);
                });
        } else {
            slotContainer.innerHTML = "<p>Please select a doctor and date.</p>";
        }
    }
</script>